/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,15],$V2=[1,16],$V3=[1,32],$V4=[1,21],$V5=[1,23],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,29],$Va=[1,28],$Vb=[1,33],$Vc=[1,30],$Vd=[1,31],$Ve=[1,22],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[2,5,19,20,23,24,28,31,37,39,42,44,45,46,47,52,54,55,59,93,94,95,96],$Vk=[1,51],$Vl=[1,50],$Vm=[1,49],$Vn=[1,64],$Vo=[1,71],$Vp=[1,65],$Vq=[1,62],$Vr=[1,63],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,78],$VC=[1,79],$VD=[1,80],$VE=[24,26,56,61],$VF=[1,112],$VG=[1,113],$VH=[1,107],$VI=[1,106],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[18,26,31,35,43,60,61,66,68,69,70,71,72,73,74,75,76,77,78,84],$VV=[26,35],$VW=[2,31],$VX=[18,26,31,35,43,77,78,84],$VY=[1,185],$VZ=[18,26,31,35,43,60,61,66,68,73,74,75,76,77,78,84],$V_=[18,26,31,35,43,60,61,73,74,75,76,77,78,84],$V$=[18,26,31,35,43,77,84],$V01=[1,215],$V11=[26,31,35],$V21=[1,229],$V31=[31,42,44];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVar":7,"funciones":8,"metodos":9,"llamada":10,"sentencia_if":11,"sentencia_switch":12,"sentencia_while":13,"sentencia_for":14,"sentencia_dowhile":15,"sentencia_print":16,"increment_decrement":17,"PTCOMA":18,"BREAK":19,"CONTINUE":20,"sentencia_return":21,"exe":22,"EXEC":23,"ID":24,"PARIZQ":25,"PARDER":26,"listaValores":27,"VOID":28,"parametros":29,"LLAIZQ":30,"LLADER":31,"tipos":32,"llamar":33,"parametros_llamada":34,"COMA":35,"expresion":36,"IF":37,"ELSE":38,"SWITCH":39,"caseList":40,"defaultList":41,"CASE":42,"DPUNTOS":43,"DEFAULT":44,"WHILE":45,"DO":46,"FOR":47,"forVar":48,"for_increment":49,"iD":50,"ASIGNAR":51,"TINT":52,"ENTERO":53,"PRINT":54,"RETURN":55,"CORIZQ":56,"CORDER":57,"TNEW":58,"LIST":59,"MENORQ":60,"MAYORA":61,"NEW":62,"tocha":63,"PUNTO":64,"ADD":65,"MENOS":66,"NOT":67,"MAS":68,"POR":69,"DIVIDIDO":70,"MOD":71,"POT":72,"MAYORIGUALQ":73,"MENORIGUALQ":74,"IGUALA":75,"DIFERENTED":76,"OR":77,"AND":78,"DECIMAL":79,"TRUE":80,"FALSE":81,"CADENA":82,"CARACTER":83,"INTERROGACION":84,"TOLOWER":85,"TOUPPER":86,"LENGTH":87,"TRUNCATE":88,"ROUND":89,"TYPEOF":90,"TOSTRING":91,"TOCHARARRAY":92,"TDOUBLE":93,"TBOOLEAN":94,"TCHAR":95,"TSTRING":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PTCOMA",19:"BREAK",20:"CONTINUE",23:"EXEC",24:"ID",25:"PARIZQ",26:"PARDER",28:"VOID",30:"LLAIZQ",31:"LLADER",35:"COMA",37:"IF",38:"ELSE",39:"SWITCH",42:"CASE",43:"DPUNTOS",44:"DEFAULT",45:"WHILE",46:"DO",47:"FOR",50:"iD",51:"ASIGNAR",52:"TINT",53:"ENTERO",54:"PRINT",55:"RETURN",56:"CORIZQ",57:"CORDER",58:"TNEW",59:"LIST",60:"MENORQ",61:"MAYORA",62:"NEW",64:"PUNTO",65:"ADD",66:"MENOS",67:"NOT",68:"MAS",69:"POR",70:"DIVIDIDO",71:"MOD",72:"POT",73:"MAYORIGUALQ",74:"MENORIGUALQ",75:"IGUALA",76:"DIFERENTED",77:"OR",78:"AND",79:"DECIMAL",80:"TRUE",81:"FALSE",82:"CADENA",83:"CARACTER",84:"INTERROGACION",85:"TOLOWER",86:"TOUPPER",87:"LENGTH",88:"TRUNCATE",89:"ROUND",90:"TYPEOF",91:"TOSTRING",92:"TOCHARARRAY",93:"TDOUBLE",94:"TBOOLEAN",95:"TCHAR",96:"TSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[22,5],[22,6],[9,8],[8,8],[10,2],[33,4],[33,3],[34,3],[34,1],[29,4],[29,2],[29,0],[11,7],[11,11],[11,9],[12,8],[12,7],[12,7],[40,5],[40,4],[41,3],[13,7],[15,9],[14,11],[48,3],[48,4],[49,1],[49,3],[16,5],[21,3],[7,3],[7,5],[7,4],[7,11],[7,9],[7,7],[7,12],[7,8],[7,7],[7,9],[36,2],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,6],[36,4],[36,3],[36,4],[36,1],[36,5],[36,1],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[36,4],[17,3],[17,3],[27,3],[27,1],[63,4],[32,1],[32,1],[32,1],[32,1],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 3:
this.$=[$$[$0]];
break;
case 13:
this.$ = $$[$0];
break;
case 19:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 20:
console.log('se ejecuta {' + $$[$0-3] + '}');
break;
case 21:
console.log('se ejecuta {' + $$[$0-4] + '} con parametros {'+$$[$0-2]+'}');
break;
case 22:
console.log('metodo llamada {'+$$[$0-6]+'} con parametros{'+$$[$0-4]+'}');
break;
case 23:
console.log('funcion llamada {'+$$[$0-6]+'} del tipo {' +$$[$0-7]+'} con parametros{'+$$[$0-4]+'}');
break;
case 25:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 26:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0]
break;
case 27:
this.$ = $$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 29:
this.$ = $$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 30:
this.$ = $$[$0-1]+' '+$$[$0]
break;
case 31:
this.$ = 'Sin parametros'
break;
case 32:
console.log('IF');
break;
case 33:
console.log('IF ELSE');
break;
case 34:
console.log('ELIF');
break;
case 35: case 36: case 37:
console.log('SWITCH');
break;
case 39:
console.log('CASE');
break;
case 40:
console.log('DEFAULT');
break;
case 41:
console.log('WHILE');
break;
case 42:
console.log('DO WHILE');
break;
case 43:
console.log('FOR');
break;
case 44:
console.log('se asigna {' + $$[$0] + '} a la variable {' +$$[$0-2]+ '}');
break;
case 45:
console.log('se declaró la variable {' + $$[$0-2] + '} del tipo {int} con valor: '+ $$[$0]);
break;
case 46: case 47:
console.log('se incrementa: ' + $$[$0]);
break;
case 48:
 this.$ = new Print($$[$0-2], _$.first_line, _$.first_column);
break;
case 49:
console.log('return: ' + $$[$0-1]);
break;
case 50:
console.log('se declaró la variable {' + $$[$0-1] + '} del tipo {' + $$[$0-2] + '}');
break;
case 51:
console.log('se declaró la variable {' + $$[$0-3] + '} del tipo {' + $$[$0-4] + '} con valor: '+ $$[$0-1].contenido);
break;
case 52:
console.log('Se asigno {' + $$[$0-1] + '} a la variable {' + $$[$0-3] + '}');
break;
case 53:
console.log('declaración de arreglo {' + $$[$0-7] + '} de tipo {'+ $$[$0-10] + '} de {' + $$[$0-2] + '} posiciones');
break;
case 54:
console.log('declaración de arreglo {' + $$[$0-5] + '} de tipo {'+ $$[$0-8] + '} con valores {' + $$[$0-2] + '}');
break;
case 55:
console.log('Asignar {' + $$[$0-1] + '} a la posicion {' + $$[$0-4] + '} del arreglo {'+$$[$0-6]+'}');
break;
case 56:
console.log('declaración de lista {' + $$[$0-7] + '} del tipo {' + $$[$0-9] + '}');
break;
case 57:
console.log('declaración de lista {' + $$[$0-3] + '} del tipo {' + $$[$0-1] + '}');
break;
case 58:
console.log('agregar a lista {' + $$[$0-6] + '} el valor {' + $$[$0-2] + '}');
break;
case 59:
console.log('Asignar {' + $$[$0-1] + '} a la posicion {' + $$[$0-5] + '} de la lista {'+$$[$0-8]+'}');
break;
case 60: case 61:
this.$ = $$[$0-1]+$$[$0];
break;
case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 85: case 97: case 98: case 99:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 77:
this.$ = new Primitivo(new Tipo(tipos.ENTERO), Number($$[$0]), _$.first_line, _$.first_column);
break;
case 78:
this.$ = new Primitivo(new Tipo(tipos.DECIMAL), Number($$[$0]), _$.first_line, _$.first_column);
break;
case 79:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), true, _$.first_line, _$.first_column);
break;
case 80:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), false, _$.first_line, _$.first_column);
break;
case 81:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0].replace(/\"/g,""), _$.first_line, _$.first_column);
break;
case 82:
this.$ = new Primitivo(new Tipo(tipos.CARACTER), $$[$0].replace(/\'/g,""), _$.first_line, _$.first_column);
break;
case 83:
this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 84: case 86: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 101:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 88:
this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{1:[3]},{2:$V0,5:[1,38],6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),{18:[1,40]},{18:[1,41]},{18:[1,42]},o($Vj,[2,17]),o($Vj,[2,18]),{18:[1,43]},{24:[1,44],56:[1,45]},{25:$Vk,51:[1,46],56:[1,47],64:[1,48],66:$Vl,68:$Vm},{60:[1,52]},{24:[1,53]},{18:[1,54]},{25:[1,55]},{25:[1,56]},{25:[1,57]},{25:[1,58]},{30:[1,59]},{25:[1,60]},{17:72,24:$Vn,25:$Vo,33:73,36:61,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{24:[1,81]},o($VE,[2,102]),o($VE,[2,103]),o($VE,[2,104]),o($VE,[2,105]),o($VE,[2,106]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,19]),{18:[1,82],25:[1,84],51:[1,83]},{57:[1,85]},{17:72,24:$Vn,25:$Vo,33:73,36:86,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{53:[1,87],56:[1,88]},{65:[1,89]},{68:[1,90]},{66:[1,91]},{17:72,24:$Vn,25:$Vo,26:[1,93],33:73,34:92,36:94,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{32:95,52:$Vb,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{25:[1,96]},o($Vj,[2,24]),{17:72,24:$Vn,25:$Vo,33:73,36:97,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:98,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:99,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{48:100,50:[1,101],52:[1,102]},{2:$V0,4:103,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{17:72,24:$Vn,25:$Vo,33:73,36:104,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{18:[1,105],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{17:72,24:$Vn,25:$Vo,33:73,36:121,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:122,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($VU,[2,76],{25:$Vk,56:[1,123]}),o($VU,[2,77]),o($VU,[2,78]),o($VU,[2,79]),o($VU,[2,80]),o($VU,[2,81]),o($VU,[2,82]),{17:72,24:$Vn,25:$Vo,32:125,33:73,36:124,52:$Vb,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VU,[2,87]),o($VU,[2,89]),{25:[1,126]},{25:[1,127]},{25:[1,128]},{25:[1,129]},{25:[1,130]},{25:[1,131]},{25:[1,132]},{25:[1,133]},o($Vj,[2,50]),{17:72,24:$Vn,25:$Vo,33:73,36:134,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($VV,$VW,{29:135,32:136,52:$Vb,93:$Vf,94:$Vg,95:$Vh,96:$Vi}),{24:[1,137]},{18:[1,138],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{57:[1,139]},{53:[1,140]},{25:[1,141]},o($VU,[2,97]),o($VU,[2,98]),{26:[1,142],35:[1,143]},o($VU,[2,26]),o($VV,[2,28],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT}),{61:[1,144]},o($VV,$VW,{32:136,29:145,52:$Vb,93:$Vf,94:$Vg,95:$Vh,96:$Vi}),{26:[1,146],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,147],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,148],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{18:[1,149]},{51:[1,150]},{24:[1,151]},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[1,152],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{26:[1,153],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},o($Vj,[2,49]),{17:72,24:$Vn,25:$Vo,33:73,36:154,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:155,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:156,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:157,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:158,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:159,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:160,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:161,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:162,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:163,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:164,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:165,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:166,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:167,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:168,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($VU,[2,60]),o($VX,[2,61],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ}),{53:[1,170],56:[1,169]},{26:[1,171],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,172]},{17:72,24:$Vn,25:$Vo,33:73,36:173,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:174,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:175,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:176,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:177,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:178,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:179,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,26:[1,180],27:181,33:73,36:182,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{18:[1,183],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,184],35:$VY},{24:[1,186]},{51:[1,187]},o($Vj,[2,52]),{51:[1,188]},{57:[1,189]},{17:72,24:$Vn,25:$Vo,33:73,36:190,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($VU,[2,25]),{17:72,24:$Vn,25:$Vo,33:73,36:191,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{24:[1,192]},{26:[1,193],35:$VY},{30:[1,194]},{30:[1,195]},{30:[1,196]},{17:72,24:$Vn,25:$Vo,33:73,36:197,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{17:72,24:$Vn,25:$Vo,33:73,36:198,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{51:[1,199]},{45:[1,200]},{18:[1,201]},o($VZ,[2,62],{69:$VJ,70:$VK,71:$VL,72:$VM}),o($VZ,[2,63],{69:$VJ,70:$VK,71:$VL,72:$VM}),o($VU,[2,64]),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($V_,[2,68],{66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM}),o($V_,[2,69],{66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM}),o($V_,[2,70],{66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM}),o($V_,[2,71],{66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM}),o($V_,[2,72],{66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM}),o($V_,[2,73],{66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM}),o($V$,[2,74],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,78:$VS}),o($VX,[2,75],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ}),{43:[1,202],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{53:[1,203]},{57:[1,204]},o($VU,[2,85]),{17:72,24:$Vn,25:$Vo,33:73,36:205,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{26:[1,206],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,207],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,208],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,209],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,210],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,211],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{26:[1,212],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{18:[1,213]},{26:[1,214],35:$V01},o($V11,[2,100],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT}),o($Vj,[2,51]),{30:[1,216]},{32:217,52:$Vb,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VV,[2,30]),{30:[1,219],58:[1,218]},{17:72,24:$Vn,25:$Vo,33:73,36:220,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{57:[1,221]},{26:[1,222],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},o($VV,[2,27],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT}),{51:[1,223]},{30:[1,224]},{2:$V0,4:225,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{40:226,41:227,42:[1,228],44:$V21},{2:$V0,4:230,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{18:[1,231],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{18:[2,44],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{53:[1,232]},{25:[1,233]},o($Vj,[2,48]),{17:72,24:$Vn,25:$Vo,33:73,36:234,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{57:[1,235]},o($VU,[2,84]),o($V$,[2,86],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,78:$VS}),o($VU,[2,90]),o($VU,[2,91]),o($VU,[2,92]),o($VU,[2,93]),o($VU,[2,94]),o($VU,[2,95]),o($VU,[2,96]),o($Vj,[2,20]),{18:[1,236]},{17:72,24:$Vn,25:$Vo,33:73,36:237,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{2:$V0,4:238,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{24:[1,239]},{32:240,52:$Vb,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{17:72,24:$Vn,25:$Vo,27:241,33:73,36:182,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{18:[1,242],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{51:[1,243]},{18:[1,244]},{62:[1,245],63:246,92:[1,247]},{2:$V0,4:248,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[1,249],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{31:[1,251],41:250,42:[1,252],44:$V21},{31:[1,253]},{17:72,24:$Vn,25:$Vo,33:73,36:254,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{43:[1,255]},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[1,256],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{17:258,24:[1,259],49:257},{18:[2,45]},{17:72,24:$Vn,25:$Vo,33:73,36:260,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($V$,[2,88],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,78:$VS}),{57:[1,261]},o($Vj,[2,21]),o($V11,[2,99],{60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT}),{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[1,262],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($VV,[2,29]),{56:[1,263]},{31:[1,264],35:$V01},o($Vj,[2,55]),{17:72,24:$Vn,25:$Vo,33:73,36:265,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($Vj,[2,58]),{59:[1,266]},{18:[1,267]},{25:[1,268]},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[1,269],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($Vj,[2,32],{38:[1,270]}),{31:[1,271]},o($Vj,[2,36]),{17:72,24:$Vn,25:$Vo,33:73,36:272,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($Vj,[2,37]),{43:[1,273],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{2:$V0,4:274,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($Vj,[2,41]),{26:[1,275]},{26:[2,46]},{51:[1,276],66:$Vl,68:$Vm},{26:[1,277],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},o($VU,[2,83]),o($Vj,[2,23]),{53:[1,278]},{18:[1,279]},{18:[1,280],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{60:[1,281]},o($Vj,[2,57]),{17:72,24:$Vn,25:$Vo,33:73,36:282,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},o($Vj,[2,22]),{11:284,30:[1,283],37:$V6},o($Vj,[2,35]),{43:[1,285],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{2:$V0,4:286,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[2,40],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{30:[1,287]},{17:72,24:$Vn,25:$Vo,33:73,36:288,53:$Vp,66:$Vq,67:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,89:$VB,90:$VC,91:$VD},{18:[1,289]},{57:[1,290]},o($Vj,[2,54]),o($Vj,[2,59]),{32:291,52:$Vb,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{26:[1,292],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},{2:$V0,6:293,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($Vj,[2,34]),{2:$V0,4:294,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($V31,[2,39],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,21:17,22:18,32:20,33:24,6:39,2:$V0,19:$V1,20:$V2,23:$V3,24:$V4,28:$V5,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi}),{2:$V0,4:295,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},{26:[2,47],60:$VF,61:$VG,66:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN,74:$VO,75:$VP,76:$VQ,77:$VR,78:$VS,84:$VT},o($Vj,[2,42]),{18:[1,296]},{61:[1,297]},{18:[2,101]},{31:[1,298]},o($V31,[2,38],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,21:17,22:18,32:20,33:24,6:39,2:$V0,19:$V1,20:$V2,23:$V3,24:$V4,28:$V5,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi}),{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,19:$V1,20:$V2,21:17,22:18,23:$V3,24:$V4,28:$V5,31:[1,299],32:20,33:24,37:$V6,39:$V7,45:$V8,46:$V9,47:$Va,52:$Vb,54:$Vc,55:$Vd,59:$Ve,93:$Vf,94:$Vg,95:$Vh,96:$Vi},o($Vj,[2,53]),{18:[1,300]},o($Vj,[2,33]),o($Vj,[2,43]),o($Vj,[2,56])],
defaultActions: {38:[2,1],232:[2,45],258:[2,46],292:[2,101]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Primitivo} = require('../Expresiones/Primitivo');
    const {Print} = require('../Instrucciones/Print');
    const {Excepcion} = require('../other/Excepcion');
    const {Tipo, tipos} = require('../other/tipo');
    const {Tree} = require('../Simbols/Tree');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 52
break;
case 6:return 93
break;
case 7:return 94
break;
case 8:return 95
break;
case 9:return 96
break;
case 10:return 80
break;
case 11:return 81
break;
case 12:return 59
break;
case 13:return 62
break;
case 14:return 65
break;
case 15:return 68
break;
case 16:return 66
break;
case 17:return 69
break;
case 18:return 70
break;
case 19:return 72
break;
case 20:return 71
break;
case 21:return 75
break;
case 22:return 76
break;
case 23:return 74
break;
case 24:return 60
break;
case 25:return 73
break;
case 26:return 61
break;
case 27:return 51
break;
case 28:return 84
break;
case 29:return 43
break;
case 30:return 18;
break;
case 31:return 64;
break;
case 32:return 35;
break;
case 33:return 77
break;
case 34:return 78
break;
case 35:return 67
break;
case 36:return 25
break;
case 37:return 26
break;
case 38:return 30
break;
case 39:return 31
break;
case 40:return 56
break;
case 41:return 57
break;
case 42:return 37
break;
case 43:return 38
break;
case 44:return 39
break;
case 45:return 42
break;
case 46:return 44
break;
case 47:return 19
break;
case 48:return 45
break;
case 49:return 46
break;
case 50:return 54
break;
case 51:return 47
break;
case 52:return 20
break;
case 53:return 55
break;
case 54:return 28
break;
case 55:return 85
break;
case 56:return 86
break;
case 57:return 87
break;
case 58:return 88
break;
case 59:return 89
break;
case 60:return 90
break;
case 61:return 91
break;
case 62:return 92
break;
case 63:return 23
break;
case 64:return 79;
break;
case 65:return 53;
break;
case 66:return 24;
break;
case 67:return 82;
break;
case 68:return 83;
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*/]*[*][/])/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:List\b)/i,/^(?:New\b)/i,/^(?:Add\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:Break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^"]*")/i,/^(?:('[^']'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}