/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,17],$V4=[1,21],$V5=[1,22],$V6=[1,23],$V7=[1,25],$V8=[1,24],$V9=[1,26],$Va=[1,27],$Vb=[1,19],$Vc=[1,28],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[5,16,20,21,23,29,34,36,39,41,42,43,44,48,49,55,87,88,89,90,91,92],$Vj=[1,41],$Vk=[1,60],$Vl=[1,66],$Vm=[1,61],$Vn=[1,58],$Vo=[1,59],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[16,27,50,57],$VB=[1,105],$VC=[1,107],$VD=[1,99],$VE=[1,98],$VF=[1,100],$VG=[1,101],$VH=[1,102],$VI=[1,103],$VJ=[1,104],$VK=[1,106],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[18,27,29,32,40,51,56,57,61,63,64,65,66,67,68,69,70,71,72,73,78],$VR=[27,32],$VS=[18,27,29,32,40,51,72,73,78],$VT=[18,27,29,32,40,51,56,57,61,63,68,69,70,71,72,73,78],$VU=[18,27,29,32,40,51,56,57,68,69,70,71,72,73,78],$VV=[18,27,29,32,40,51,72,78],$VW=[1,217],$VX=[29,32],$VY=[29,39,41];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVar":7,"metodos":8,"llamada":9,"sentencia_if":10,"sentencia_switch":11,"sentencia_while":12,"sentencia_for":13,"sentencia_dowhile":14,"sentencia_print":15,"ID":16,"INC":17,"PTCOMA":18,"DEC":19,"CONTINUE":20,"BREAK":21,"sentencia_return":22,"EXEC":23,"tipos":24,"PARIZQ":25,"parametros":26,"PARDER":27,"LLAIZQ":28,"LLADER":29,"llamar":30,"parametros_llamada":31,"COMA":32,"expresion":33,"IF":34,"ELSE":35,"SWITCH":36,"caseList":37,"defaultList":38,"CASE":39,"DPUNTOS":40,"DEFAULT":41,"WHILE":42,"DO":43,"FOR":44,"forVar":45,"for_increment":46,"ASIGNAR":47,"PRINT":48,"RETURN":49,"CORIZQ":50,"CORDER":51,"NEW":52,"DECIMAL":53,"listaValores":54,"LIST":55,"MENORQ":56,"MAYORA":57,"tocha":58,"PUNTO":59,"ADD":60,"MENOS":61,"NOT":62,"MAS":63,"POR":64,"DIVIDIDO":65,"MOD":66,"POT":67,"MENORIGUALQ":68,"MAYORIGUALQ":69,"IGUALA":70,"DIFERENTED":71,"OR":72,"AND":73,"TRUE":74,"FALSE":75,"CADENA":76,"CARACTER":77,"INTERROGACION":78,"TOLOWER":79,"TOUPPER":80,"LENGTH":81,"TRUNCATE":82,"ROUND":83,"TYPEOF":84,"TOSTRING":85,"TOCHARARRAY":86,"TINT":87,"TDOUBLE":88,"TBOOLEAN":89,"TCHAR":90,"TSTRING":91,"TVOID":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"ID",17:"INC",18:"PTCOMA",19:"DEC",20:"CONTINUE",21:"BREAK",23:"EXEC",25:"PARIZQ",27:"PARDER",28:"LLAIZQ",29:"LLADER",32:"COMA",34:"IF",35:"ELSE",36:"SWITCH",39:"CASE",40:"DPUNTOS",41:"DEFAULT",42:"WHILE",43:"DO",44:"FOR",47:"ASIGNAR",48:"PRINT",49:"RETURN",50:"CORIZQ",51:"CORDER",52:"NEW",53:"DECIMAL",55:"LIST",56:"MENORQ",57:"MAYORA",59:"PUNTO",60:"ADD",61:"MENOS",62:"NOT",63:"MAS",64:"POR",65:"DIVIDIDO",66:"MOD",67:"POT",68:"MENORIGUALQ",69:"MAYORIGUALQ",70:"IGUALA",71:"DIFERENTED",72:"OR",73:"AND",74:"TRUE",75:"FALSE",76:"CADENA",77:"CARACTER",78:"INTERROGACION",79:"TOLOWER",80:"TOUPPER",81:"LENGTH",82:"TRUNCATE",83:"ROUND",84:"TYPEOF",85:"TOSTRING",86:"TOCHARARRAY",87:"TINT",88:"TDOUBLE",89:"TBOOLEAN",90:"TCHAR",91:"TSTRING",92:"TVOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,3],[6,3],[6,2],[6,2],[6,1],[6,2],[8,8],[8,7],[9,2],[30,4],[30,3],[31,3],[31,1],[26,4],[26,2],[10,7],[10,6],[10,11],[10,9],[11,8],[11,7],[11,7],[37,5],[37,4],[38,3],[12,7],[14,9],[13,11],[45,4],[45,3],[46,2],[46,2],[46,3],[15,5],[22,3],[22,2],[7,3],[7,5],[7,4],[7,11],[7,9],[7,7],[7,12],[7,8],[7,7],[7,9],[33,2],[33,2],[33,2],[33,3],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,4],[33,6],[33,3],[33,4],[33,5],[33,1],[33,4],[33,4],[33,4],[33,4],[33,4],[33,4],[33,4],[54,3],[54,1],[58,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = new Tree($$[$0-1]); return this.$;
break;
case 2:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 17: case 18:
this.$ = $$[$0];
break;
case 13:
this.$ = new InDecrement($$[$0-2], "++", _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 14:
this.$ = new InDecrement($$[$0-2], "--", _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 15:
this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 16:
this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 19:
this.$ = new DeclaracionMetodo($$[$0-7] ,$$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 20:
this.$ = new DeclaracionMetodo($$[$0-6] ,$$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 21: case 85:
this.$ = $$[$0-1];
break;
case 22:
this.$ = new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 23:
this.$ = new LlamadaMetodo($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24: case 96:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 25: case 97:
 this.$ = []; this.$.push($$[$0]);
break;
case 26:
this.$ = $$[$0-3]; this.$.push(new Declaracion($$[$0-1], $$[$0], null,_$[$0-3].first_line, _$[$0-3].first_column));
break;
case 27:
this.$ = []; this.$.push(new Declaracion($$[$0-1], $$[$0], null,_$[$0-1].first_line, _$[$0-1].first_column));
break;
case 28:
this.$ = new If($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 29:
this.$ = new If($$[$0-3], [], [], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 30:
this.$ = new If($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 31:
this.$ = new If($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 32:
this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
break;
case 33:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 34:
this.$ = new Switch($$[$0-4], null, $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 35:
this.$ = $$[$0-4]; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
break;
case 36:
this.$ = []; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
break;
case 37: case 88:
this.$ = $$[$0]
break;
case 38:
this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 39:
this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 40:
this.$ = new For($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 41:
this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 42: case 45:
this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 43: case 61:
this.$ = new InDecrement($$[$0-1], "++", _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 44: case 63:
this.$ = new InDecrement($$[$0-1], "--", _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 46:
 this.$ = new Print($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 47:
this.$ = new Retorno($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 48:
this.$ = new Retorno(null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 49:
this.$ = new Declaracion($$[$0-2], $$[$0-1], defal($$[$0-2]), _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 50:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 51:
this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 52:
this.$ = new DeclaracionArray($$[$0-10], $$[$0-7], $$[$0-4], $$[$0-2], null, _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 53:
this.$ = new DeclaracionArray($$[$0-8], $$[$0-5], null, null, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 54:
this.$ = new AsignacionVector($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 55:
this.$ = new DeclaracionLista($$[$0-9], $$[$0-7], $$[$0-2], _$[$0-11].first_line, _$[$0-11].first_column);
break;
case 57:
this.$ = new AddLista($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 58:
this.$ = new AsignacionLista($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 59:
this.$ = new Aritmetica(null, $$[$0], '-', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 60:
this.$ = new Logico(null, $$[$0], '!', _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 62:
this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 64:
this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new Aritmetica($$[$0-2], $$[$0], '^', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 78:
this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
break;
case 79:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
break;
case 80:
this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
break;
case 81:
this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 82:
this.$ = new Primitivo(new Tipo(tipos.CARACTER), $$[$0].replace(/\'/g,""), _$[$0].first_line, _$[$0].first_column);
break;
case 83:
this.$ = new Vector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 84:
this.$ = new Vector($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 86:
this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 87:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 99:
this.$ = new Tipo(tipos.ENTERO);
break;
case 100:
this.$ = new Tipo(tipos.DECIMAL);
break;
case 101:
this.$ = new Tipo(tipos.BOOLEANO);
break;
case 102:
this.$ = new Tipo(tipos.CARACTER);
break;
case 103:
this.$ = new Tipo(tipos.STRING);
break;
case 104:
this.$ = new Tipo(tipos.VOID);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{17:[1,36],19:[1,37],25:$Vj,47:[1,38],50:[1,39],59:[1,40]},{18:[1,42]},{18:[1,43]},o($Vi,[2,17]),{9:44,16:[1,45],30:20},{16:[1,46],50:[1,47]},{56:[1,48]},{18:[1,49]},{25:[1,50]},{25:[1,51]},{25:[1,52]},{25:[1,53]},{28:[1,54]},{25:[1,55]},{16:$Vk,18:[1,57],25:$Vl,30:67,33:56,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VA,[2,99]),o($VA,[2,100]),o($VA,[2,101]),o($VA,[2,102]),o($VA,[2,103]),o($VA,[2,104]),{1:[2,1]},o($Vi,[2,2]),{18:[1,75]},{18:[1,76]},{16:$Vk,25:$Vl,30:67,33:77,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:78,50:[1,79],53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{60:[1,80]},{16:$Vk,25:$Vl,27:[1,82],30:67,31:81,33:83,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,18]),{25:$Vj},{18:[1,84],25:[1,86],47:[1,85]},{51:[1,87]},{24:88,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,21]),{16:$Vk,25:$Vl,30:67,33:89,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:90,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:91,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:[1,94],24:93,45:92,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:95,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{16:$Vk,25:$Vl,30:67,33:96,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{18:[1,97],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($Vi,[2,48]),{16:$Vk,25:$Vl,30:67,33:113,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:114,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VQ,[2,77],{17:[1,115],19:[1,116],25:$Vj,50:[1,117]}),o($VQ,[2,78]),o($VQ,[2,79]),o($VQ,[2,80]),o($VQ,[2,81]),o($VQ,[2,82]),{16:$Vk,24:119,25:$Vl,30:67,33:118,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VQ,[2,88]),{25:[1,120]},{25:[1,121]},{25:[1,122]},{25:[1,123]},{25:[1,124]},{25:[1,125]},{25:[1,126]},o($Vi,[2,13]),o($Vi,[2,14]),{18:[1,127],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{51:[1,128],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{16:$Vk,25:$Vl,30:67,33:129,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{25:[1,130]},{27:[1,131],32:[1,132]},o($VQ,[2,23]),o($VR,[2,25],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP}),o($Vi,[2,49]),{16:$Vk,25:$Vl,30:67,33:133,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{24:136,26:134,27:[1,135],87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{16:[1,137]},{57:[1,138]},{27:[1,139],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,140],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,141],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{18:[1,142]},{16:[1,143]},{47:[1,144]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,145],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{27:[1,146],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($Vi,[2,47]),{16:$Vk,25:$Vl,30:67,33:147,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:148,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:149,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:150,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:151,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:152,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:153,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:154,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:155,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:156,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:157,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:158,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:159,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:160,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:161,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VQ,[2,59]),o($VS,[2,60],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM}),o($VQ,[2,61]),o($VQ,[2,63]),{16:$Vk,25:$Vl,30:67,33:162,50:[1,163],53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{27:[1,164],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,165]},{16:$Vk,25:$Vl,30:67,33:166,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:167,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:168,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:169,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:170,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:171,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{16:$Vk,25:$Vl,30:67,33:172,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($Vi,[2,51]),{47:[1,173]},{51:[1,174],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{16:$Vk,25:$Vl,30:67,33:175,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VQ,[2,22]),{16:$Vk,25:$Vl,30:67,33:176,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{18:[1,177],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,178],32:[1,179]},{28:[1,180]},{16:[1,181]},{47:[1,182]},{16:[1,183]},{28:[1,184]},{28:[1,185]},{28:[1,186]},{16:$Vk,25:$Vl,30:67,33:187,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{47:[1,188]},{16:$Vk,25:$Vl,30:67,33:189,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{42:[1,190]},{18:[1,191]},o($VT,[2,62],{64:$VF,65:$VG,66:$VH,67:$VI}),o($VT,[2,64],{64:$VF,65:$VG,66:$VH,67:$VI}),o($VQ,[2,65]),o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,68]),o($VU,[2,69],{61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI}),o($VU,[2,70],{61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI}),o($VU,[2,71],{61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI}),o($VU,[2,72],{61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI}),o($VU,[2,73],{61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI}),o($VU,[2,74],{61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI}),o($VV,[2,75],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,73:$VO}),o($VS,[2,76],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM}),{40:[1,192],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{51:[1,193],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{16:$Vk,25:$Vl,30:67,33:194,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VQ,[2,85]),{16:$Vk,25:$Vl,30:67,33:195,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{27:[1,196],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,197],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,198],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,199],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,200],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,201],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{27:[1,202],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{16:$Vk,25:$Vl,30:67,33:203,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{51:[1,204]},{27:[1,205],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($VR,[2,24],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP}),o($Vi,[2,50]),{28:[1,206]},{24:207,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{4:208,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VR,[2,27]),{28:[1,210],52:[1,209]},{47:[1,211]},{4:212,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,213],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{37:214,38:215,39:[1,216],41:$VW},{4:218,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{18:[1,219],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{16:$Vk,25:$Vl,30:67,33:220,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{18:[2,42],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{25:[1,221]},o($Vi,[2,46]),{16:$Vk,25:$Vl,30:67,33:222,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VQ,[2,83]),{51:[1,223],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($VV,[2,86],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,73:$VO}),o($VQ,[2,89]),o($VQ,[2,90]),o($VQ,[2,91]),o($VQ,[2,92]),o($VQ,[2,93]),o($VQ,[2,94]),o($VQ,[2,95]),{18:[1,224],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{47:[1,225]},{18:[1,226]},{4:227,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{16:[1,228]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,229],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{24:230,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{16:$Vk,25:$Vl,30:67,33:232,53:$Vm,54:231,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{52:[1,233],58:234,86:[1,235]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,236],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,29]),{29:[1,238],38:237,39:[1,239],41:$VW},{29:[1,240]},{16:$Vk,25:$Vl,30:67,33:241,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{40:[1,242]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,243],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{16:[1,245],46:244},{18:[2,41],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{16:$Vk,25:$Vl,30:67,33:246,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($VV,[2,87],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,73:$VO}),{51:[1,247]},o($Vi,[2,54]),{16:$Vk,25:$Vl,30:67,33:248,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($Vi,[2,57]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,249],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VR,[2,26]),o($Vi,[2,20]),{50:[1,250]},{29:[1,251],32:[1,252]},o($VX,[2,97],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP}),{55:[1,253]},{18:[1,254]},{25:[1,255]},o($Vi,[2,28],{35:[1,256]}),{29:[1,257]},o($Vi,[2,33]),{16:$Vk,25:$Vl,30:67,33:258,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},o($Vi,[2,34]),{40:[1,259],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{4:260,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,38]),{27:[1,261]},{17:[1,262],19:[1,263],47:[1,264]},{27:[1,265],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($VQ,[2,84]),{18:[1,266],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($Vi,[2,19]),{53:[1,267]},{18:[1,268]},{16:$Vk,25:$Vl,30:67,33:269,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{56:[1,270]},o($Vi,[2,56]),{16:$Vk,25:$Vl,30:67,33:271,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{10:273,28:[1,272],34:$V4},o($Vi,[2,32]),{40:[1,274],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{4:275,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[2,37],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{28:[1,276]},{27:[2,43]},{27:[2,44]},{16:$Vk,25:$Vl,30:67,33:277,53:$Vm,61:$Vn,62:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,79:$Vt,80:$Vu,81:$Vv,82:$Vw,83:$Vx,84:$Vy,85:$Vz},{18:[1,278]},o($Vi,[2,58]),{51:[1,279]},o($Vi,[2,53]),o($VX,[2,96],{56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP}),{24:280,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{27:[1,281],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},{4:282,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,31]),{4:283,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VY,[2,36],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,22:16,24:18,30:20,6:35,16:$V0,20:$V1,21:$V2,23:$V3,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh}),{4:284,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},{27:[2,45],56:$VB,57:$VC,61:$VD,63:$VE,64:$VF,65:$VG,66:$VH,67:$VI,68:$VJ,69:$VK,70:$VL,71:$VM,72:$VN,73:$VO,78:$VP},o($Vi,[2,39]),{18:[1,285]},{57:[1,286]},{18:[2,98]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,287],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($VY,[2,35],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,22:16,24:18,30:20,6:35,16:$V0,20:$V1,21:$V2,23:$V3,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh}),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,20:$V1,21:$V2,22:16,23:$V3,24:18,29:[1,288],30:20,34:$V4,36:$V5,42:$V6,43:$V7,44:$V8,48:$V9,49:$Va,55:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,92:$Vh},o($Vi,[2,52]),{18:[1,289]},o($Vi,[2,30]),o($Vi,[2,40]),o($Vi,[2,55])],
defaultActions: {34:[2,1],262:[2,43],263:[2,44],281:[2,98]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let txt = "";
    //Tipos
    const {Tree} = require('../Simbols/Tree');
    const {Tipo, tipos, esEntero} = require('../other/tipo');
    const {Primitivo} = require('../Expresiones/Primitivo');
    const {Excepcion} = require('../other/Excepcion');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Vector} = require('../Expresiones/Vector');
    const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    const {Print} = require('../Instrucciones/Print');
    const {Declaracion, defal} = require('../Instrucciones/Declaracion');
    const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
    const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    const {AddLista} = require('../Instrucciones/AddLista');
    const {If} = require('../Instrucciones/If');
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    //Expresion
    const {Aritmetica} = require('../Expresiones/Aritmetica');
    const {Relacional} = require('../Expresiones/Relacional');
    const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:txt=""; this.begin("CADENA");
break;
case 6:txt+=yy_.yytext;
break;
case 7:txt+='\n';
break;
case 8:txt+='\t';
break;
case 9:txt+='\"';
break;
case 10:txt+='\'';
break;
case 11:txt+='\\';
break;
case 12:yy_.yytext = txt; this.popState(); return 76;
break;
case 13:return 87
break;
case 14:return 88
break;
case 15:return 89
break;
case 16:return 90
break;
case 17:return 92
break;
case 18:return 91
break;
case 19:return 74
break;
case 20:return 75
break;
case 21:return 55
break;
case 22:return 52
break;
case 23:return 60
break;
case 24:return 17
break;
case 25:return 63
break;
case 26:return 19
break;
case 27:return 61
break;
case 28:return 64
break;
case 29:return 65
break;
case 30:return 67
break;
case 31:return 66
break;
case 32:return 70
break;
case 33:return 71
break;
case 34:return 68
break;
case 35:return 56
break;
case 36:return 69
break;
case 37:return 57
break;
case 38:return 47
break;
case 39:return 78
break;
case 40:return 40
break;
case 41:return 18;
break;
case 42:return 59;
break;
case 43:return 32;
break;
case 44:return 72
break;
case 45:return 73
break;
case 46:return 62
break;
case 47:return 25
break;
case 48:return 27
break;
case 49:return 28
break;
case 50:return 29
break;
case 51:return 50
break;
case 52:return 51
break;
case 53:return 34
break;
case 54:return 35
break;
case 55:return 36
break;
case 56:return 39
break;
case 57:return 41
break;
case 58:return 21
break;
case 59:return 42
break;
case 60:return 43
break;
case 61:return 48
break;
case 62:return 44
break;
case 63:return 20
break;
case 64:return 49
break;
case 65:return 79
break;
case 66:return 80
break;
case 67:return 81
break;
case 68:return 82
break;
case 69:return 83
break;
case 70:return 84
break;
case 71:return 85
break;
case 72:return 86
break;
case 73:return 23
break;
case 74:return 53;
break;
case 75:return 'ENTERO';
break;
case 76:return 16;
break;
case 77:return 77;
break;
case 78:return 5;
break;
case 79: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*/]*[*][/])/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\")/i,/^(?:\\\\')/i,/^(?:\\\\)/i,/^(?:["])/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:Void\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:List\b)/i,/^(?:New\b)/i,/^(?:Add\b)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:Break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:exec\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:('[^']?'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CADENA":{"rules":[6,7,8,9,10,11,12],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}