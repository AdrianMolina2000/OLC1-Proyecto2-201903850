/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,13],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,21],$V6=[1,20],$V7=[1,23],$V8=[1,15],$V9=[1,22],$Va=[1,16],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[1,27],$Vf=[5,22,27,29],$Vg=[2,5,16,17,22,24,27,29,30,31,32,37,38,40,46,71,72,73,74],$Vh=[1,38],$Vi=[1,37],$Vj=[20,38,42,48],$Vk=[1,58],$Vl=[1,57],$Vm=[1,52],$Vn=[1,50],$Vo=[1,51],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,83],$Vu=[1,84],$Vv=[1,78],$Vw=[1,77],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[15,20,22,28,47,48,52,54,55,56,57,58,59,60,61,62,63,64,69,70],$VJ=[15,20,22,28,63,64,69,70],$VK=[15,20,22,28,47,48,52,54,59,60,61,62,63,64,69,70],$VL=[15,20,22,28,47,48,59,60,61,62,63,64,69,70],$VM=[15,20,22,28,63,69,70],$VN=[1,156],$VO=[22,70],$VP=[22,27,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVar":7,"sentencia_if":8,"sentencia_switch":9,"sentencia_while":10,"sentencia_for":11,"sentencia_dowhile":12,"sentencia_print":13,"increment_decrement":14,"PTCOMA":15,"BREAK":16,"IF":17,"PARIZQ":18,"expresion":19,"PARDER":20,"LLAIZQ":21,"LLADER":22,"ELSE":23,"SWITCH":24,"caseList":25,"defaultList":26,"CASE":27,"DPUNTOS":28,"DEFAULT":29,"WHILE":30,"DO":31,"FOR":32,"forVar":33,"for_increment":34,"iD":35,"ASIGNAR":36,"TINT":37,"ID":38,"NUMERO":39,"PRINT":40,"tipos":41,"CORIZQ":42,"CORDER":43,"TNEW":44,"listaValores":45,"LIST":46,"MENORQ":47,"MAYORA":48,"NEW":49,"PUNTO":50,"ADD":51,"MENOS":52,"NOT":53,"MAS":54,"POR":55,"DIVIDIDO":56,"MOD":57,"POT":58,"MAYORIGUALQ":59,"MENORIGUALQ":60,"IGUALA":61,"DIFERENTED":62,"OR":63,"AND":64,"TRUE":65,"FALSE":66,"CADENA":67,"CARACTER":68,"INTERROGACION":69,"COMA":70,"TDOUBLE":71,"TBOOLEAN":72,"TCHAR":73,"TSTRING":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PTCOMA",16:"BREAK",17:"IF",18:"PARIZQ",20:"PARDER",21:"LLAIZQ",22:"LLADER",23:"ELSE",24:"SWITCH",27:"CASE",28:"DPUNTOS",29:"DEFAULT",30:"WHILE",31:"DO",32:"FOR",35:"iD",36:"ASIGNAR",37:"TINT",38:"ID",39:"NUMERO",40:"PRINT",42:"CORIZQ",43:"CORDER",44:"TNEW",46:"LIST",47:"MENORQ",48:"MAYORA",49:"NEW",50:"PUNTO",51:"ADD",52:"MENOS",53:"NOT",54:"MAS",55:"POR",56:"DIVIDIDO",57:"MOD",58:"POT",59:"MAYORIGUALQ",60:"MENORIGUALQ",61:"IGUALA",62:"DIFERENTED",63:"OR",64:"AND",65:"TRUE",66:"FALSE",67:"CADENA",68:"CARACTER",69:"INTERROGACION",70:"COMA",71:"TDOUBLE",72:"TBOOLEAN",73:"TCHAR",74:"TSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[8,7],[8,11],[8,9],[9,8],[9,7],[9,7],[25,5],[25,4],[26,3],[10,7],[12,9],[11,11],[33,3],[33,4],[34,1],[34,3],[13,5],[7,3],[7,5],[7,4],[7,11],[7,9],[7,7],[7,12],[7,7],[7,9],[19,2],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,6],[19,4],[19,3],[19,4],[19,1],[19,1],[19,5],[14,3],[14,3],[45,3],[45,1],[41,1],[41,1],[41,1],[41,1],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 14:
console.log('IF');
break;
case 15:
console.log('IF ELSE');
break;
case 16:
console.log('ELIF');
break;
case 17: case 18: case 19:
console.log('SWITCH');
break;
case 21:
console.log('CASE');
break;
case 22:
console.log('DEFAULT');
break;
case 23:
console.log('WHILE');
break;
case 24:
console.log('DO WHILE');
break;
case 25:
console.log('FOR');
break;
case 26:
console.log('se asigna {' + $$[$0] + '} a la variable {' +$$[$0-2]+ '}');
break;
case 27:
console.log('se declaró la variable {' + $$[$0-2] + '} del tipo {int} con valor: '+ $$[$0]);
break;
case 28: case 29:
console.log('se incrementa: ' + $$[$0]);
break;
case 30:
console.log('Se imprime: ' + $$[$0-2]);
break;
case 31:
console.log('se declaró la variable {' + $$[$0-1] + '} del tipo {' + $$[$0-2] + '}');
break;
case 32:
console.log('se declaró la variable {' + $$[$0-3] + '} del tipo {' + $$[$0-4] + '} con valor: '+ $$[$0-1]);
break;
case 33:
console.log('Se asigno {' + $$[$0-1] + '} a la variable {' + $$[$0-3] + '}');
break;
case 34:
console.log('declaración de arreglo {' + $$[$0-7] + '} de tipo {'+ $$[$0-10] + '} de {' + $$[$0-2] + '} posiciones');
break;
case 35:
console.log('declaración de arreglo {' + $$[$0-5] + '} de tipo {'+ $$[$0-8] + '} con valores {' + $$[$0-2] + '}');
break;
case 36:
console.log('Asignar {' + $$[$0-1] + '} a la posicion {' + $$[$0-4] + '} del arreglo {'+$$[$0-6]+'}');
break;
case 37:
console.log('declaración de lista {' + $$[$0-7] + '} del tipo {' + $$[$0-9] + '}');
break;
case 38:
console.log('agregar a lista {' + $$[$0-6] + '} el valor {' + $$[$0-2] + '}');
break;
case 39:
console.log('Asignar {' + $$[$0-1] + '} a la posicion {' + $$[$0-5] + '} de la lista {'+$$[$0-8]+'}');
break;
case 40: case 41:
this.$ = $$[$0-1]+$$[$0];
break;
case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 63: case 68: case 69: case 70:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 61:
this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 62: case 64:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 67:
this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{1:[3]},{5:[1,28]},o($Vf,[2,3],{6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,41:14,4:29,2:$V0,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve}),o($Vf,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),{15:[1,30]},{15:[1,31]},{38:[1,32],42:[1,33]},{36:[1,34],42:[1,35],50:[1,36],52:$Vh,54:$Vi},{47:[1,39]},{18:[1,40]},{18:[1,41]},{18:[1,42]},{18:[1,43]},{21:[1,44]},{18:[1,45]},o($Vj,[2,72]),o($Vj,[2,73]),o($Vj,[2,74]),o($Vj,[2,75]),o($Vj,[2,76]),{1:[2,1]},o($Vf,[2,2]),o($Vg,[2,12]),o($Vg,[2,13]),{15:[1,46],36:[1,47]},{43:[1,48]},{14:59,18:$Vk,19:49,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{39:[1,60],42:[1,61]},{51:[1,62]},{54:[1,63]},{52:[1,64]},{37:$V7,41:65,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{14:59,18:$Vk,19:66,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:67,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:68,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{33:69,35:[1,70],37:[1,71]},{2:$V0,4:72,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{14:59,18:$Vk,19:73,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($Vg,[2,31]),{14:59,18:$Vk,19:74,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{38:[1,75]},{15:[1,76],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{14:59,18:$Vk,19:92,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:93,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($VI,[2,56]),o($VI,[2,57]),o($VI,[2,58]),o($VI,[2,59]),o($VI,[2,60]),o([15,20,22,28,47,48,55,56,57,58,59,60,61,62,63,64,69,70],[2,65],{42:[1,94],52:$Vh,54:$Vi}),{14:59,18:$Vk,19:95,37:$V7,38:$Vl,39:$Vm,41:96,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs,71:$Vb,72:$Vc,73:$Vd,74:$Ve},o($VI,[2,66]),{43:[1,97]},{39:[1,98]},{18:[1,99]},o($VI,[2,68]),o($VI,[2,69]),{48:[1,100]},{20:[1,101],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{20:[1,102],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{20:[1,103],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{15:[1,104]},{36:[1,105]},{38:[1,106]},{22:[1,107]},{20:[1,108],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{15:[1,109],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{36:[1,110]},o($Vg,[2,33]),{14:59,18:$Vk,19:111,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:112,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:113,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:114,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:115,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:116,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:117,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:118,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:119,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:120,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:121,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:122,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:123,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:124,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:125,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($VI,[2,40]),o($VJ,[2,41],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),{39:[1,127],42:[1,126]},{20:[1,128],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{20:[1,129]},{36:[1,130]},{43:[1,131]},{14:59,18:$Vk,19:132,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{38:[1,133]},{21:[1,134]},{21:[1,135]},{21:[1,136]},{14:59,18:$Vk,19:137,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:138,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{36:[1,139]},{30:[1,140]},{15:[1,141]},o($Vg,[2,32]),{21:[1,143],44:[1,142]},o($VK,[2,42],{55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VK,[2,43],{55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VI,[2,44]),o($VI,[2,45]),o($VI,[2,46]),o($VI,[2,47]),o($VL,[2,48],{52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VL,[2,49],{52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VL,[2,50],{52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VL,[2,51],{52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VL,[2,52],{52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VL,[2,53],{52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA}),o($VM,[2,54],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,64:$VG}),o($VJ,[2,55],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE}),{28:[1,144],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{39:[1,145]},{43:[1,146]},o($VI,[2,63]),{14:59,18:$Vk,19:147,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:148,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{43:[1,149]},{20:[1,150],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{36:[1,151]},{2:$V0,4:152,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{25:153,26:154,27:[1,155],29:$VN},{2:$V0,4:157,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{15:[1,158],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{15:[2,26],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{39:[1,159]},{18:[1,160]},o($Vg,[2,30]),{37:$V7,41:161,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{14:59,18:$Vk,19:163,38:$Vl,39:$Vm,45:162,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{14:59,18:$Vk,19:164,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{43:[1,165]},o($VI,[2,62]),o($VM,[2,64],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,64:$VG}),{15:[1,166],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{36:[1,167]},{15:[1,168]},{49:[1,169]},{22:[1,170]},{22:[1,172],26:171,27:[1,173],29:$VN},{22:[1,174]},{14:59,18:$Vk,19:175,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{28:[1,176]},{22:[1,177]},{14:179,34:178,38:[1,180]},{15:[2,27]},{14:59,18:$Vk,19:181,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{42:[1,182]},{22:[1,183],70:[1,184]},o($VO,[2,71],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH}),o($VM,[2,67],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,64:$VG}),{43:[1,185]},o($Vg,[2,36]),{14:59,18:$Vk,19:186,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($Vg,[2,38]),{46:[1,187]},o($Vg,[2,14],{23:[1,188]}),{22:[1,189]},o($Vg,[2,18]),{14:59,18:$Vk,19:190,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($Vg,[2,19]),{28:[1,191],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{2:$V0,4:192,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},o($Vg,[2,23]),{20:[1,193]},{20:[2,28]},{36:[1,194],52:$Vh,54:$Vi},{20:[1,195],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{39:[1,196]},{15:[1,197]},{14:59,18:$Vk,19:198,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},o($VI,[2,61]),{15:[1,199],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{47:[1,200]},{8:202,17:$V2,21:[1,201]},o($Vg,[2,17]),{28:[1,203],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},{2:$V0,4:204,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{22:[2,22]},{21:[1,205]},{14:59,18:$Vk,19:206,38:$Vl,39:$Vm,52:$Vn,53:$Vo,65:$Vp,66:$Vq,67:$Vr,68:$Vs},{15:[1,207]},{43:[1,208]},o($Vg,[2,35]),o($VO,[2,70],{47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH}),o($Vg,[2,39]),{37:$V7,41:209,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{6:210,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},o($Vg,[2,16]),{2:$V0,4:211,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},o($VP,[2,21]),{2:$V0,4:212,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,16:$V1,17:$V2,24:$V3,30:$V4,31:$V5,32:$V6,37:$V7,38:$V8,40:$V9,41:14,46:$Va,71:$Vb,72:$Vc,73:$Vd,74:$Ve},{20:[2,29],47:$Vt,48:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,60:$VC,61:$VD,62:$VE,63:$VF,64:$VG,69:$VH},o($Vg,[2,24]),{15:[1,213]},{48:[1,214]},{22:[1,215]},o($VP,[2,20]),{22:[1,216]},o($Vg,[2,34]),{15:[1,217]},o($Vg,[2,15]),o($Vg,[2,25]),o($Vg,[2,37])],
defaultActions: {28:[2,1],159:[2,27],179:[2,28],192:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 37
break;
case 6:return 71
break;
case 7:return 72
break;
case 8:return 73
break;
case 9:return 74
break;
case 10:return 65
break;
case 11:return 66
break;
case 12:return 46
break;
case 13:return 49
break;
case 14:return 51
break;
case 15:return 54
break;
case 16:return 52
break;
case 17:return 55
break;
case 18:return 56
break;
case 19:return 58
break;
case 20:return 57
break;
case 21:return 61
break;
case 22:return 62
break;
case 23:return 60
break;
case 24:return 47
break;
case 25:return 59
break;
case 26:return 48
break;
case 27:return 36
break;
case 28:return 69
break;
case 29:return 28
break;
case 30:return 15;
break;
case 31:return 50;
break;
case 32:return 70;
break;
case 33:return 63
break;
case 34:return 64
break;
case 35:return 53
break;
case 36:return 18
break;
case 37:return 20
break;
case 38:return 21
break;
case 39:return 22
break;
case 40:return 42
break;
case 41:return 43
break;
case 42:return 17
break;
case 43:return 23
break;
case 44:return 24
break;
case 45:return 27
break;
case 46:return 29
break;
case 47:return 16
break;
case 48:return 30
break;
case 49:return 31
break;
case 50:return 40
break;
case 51:return 32
break;
case 52:return 39;
break;
case 53:return 38;
break;
case 54:return 67;
break;
case 55:return 68;
break;
case 56:return 5;
break;
case 57: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*/]*[*][/])/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:List\b)/i,/^(?:New\b)/i,/^(?:Add\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:Break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^"]*")/i,/^(?:('[^']'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}