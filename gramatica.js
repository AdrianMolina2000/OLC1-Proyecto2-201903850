/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,16],$V2=[1,17],$V3=[1,22],$V4=[1,20],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,28],$V9=[1,27],$Va=[1,31],$Vb=[1,29],$Vc=[1,30],$Vd=[1,21],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[5,28,39,41],$Vj=[2,5,19,20,22,23,28,34,36,39,41,42,43,44,49,51,52,57,82,83,84,85],$Vk=[1,48],$Vl=[1,47],$Vm=[1,46],$Vn=[1,61],$Vo=[1,67],$Vp=[1,62],$Vq=[1,59],$Vr=[1,60],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,70],$Vx=[23,26,53,59],$Vy=[1,101],$Vz=[1,102],$VA=[1,96],$VB=[1,95],$VC=[1,97],$VD=[1,98],$VE=[1,99],$VF=[1,100],$VG=[1,103],$VH=[1,104],$VI=[1,105],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[18,26,28,32,40,58,59,63,65,66,67,68,69,70,71,72,73,74,75,80],$VO=[26,32],$VP=[2,28],$VQ=[18,26,28,32,40,74,75,80],$VR=[1,158],$VS=[18,26,28,32,40,58,59,63,65,70,71,72,73,74,75,80],$VT=[18,26,28,32,40,58,59,70,71,72,73,74,75,80],$VU=[18,26,28,32,40,74,80],$VV=[1,193],$VW=[28,32],$VX=[28,39,41];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVar":7,"funciones":8,"metodos":9,"llamada":10,"sentencia_if":11,"sentencia_switch":12,"sentencia_while":13,"sentencia_for":14,"sentencia_dowhile":15,"sentencia_print":16,"increment_decrement":17,"PTCOMA":18,"BREAK":19,"CONTINUE":20,"sentencia_return":21,"VOID":22,"ID":23,"PARIZQ":24,"parametros":25,"PARDER":26,"LLAIZQ":27,"LLADER":28,"tipos":29,"llamar":30,"parametros_llamada":31,"COMA":32,"expresion":33,"IF":34,"ELSE":35,"SWITCH":36,"caseList":37,"defaultList":38,"CASE":39,"DPUNTOS":40,"DEFAULT":41,"WHILE":42,"DO":43,"FOR":44,"forVar":45,"for_increment":46,"iD":47,"ASIGNAR":48,"TINT":49,"NUMERO":50,"PRINT":51,"RETURN":52,"CORIZQ":53,"CORDER":54,"TNEW":55,"listaValores":56,"LIST":57,"MENORQ":58,"MAYORA":59,"NEW":60,"PUNTO":61,"ADD":62,"MENOS":63,"NOT":64,"MAS":65,"POR":66,"DIVIDIDO":67,"MOD":68,"POT":69,"MAYORIGUALQ":70,"MENORIGUALQ":71,"IGUALA":72,"DIFERENTED":73,"OR":74,"AND":75,"TRUE":76,"FALSE":77,"CADENA":78,"CARACTER":79,"INTERROGACION":80,"TOLOWER":81,"TDOUBLE":82,"TBOOLEAN":83,"TCHAR":84,"TSTRING":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PTCOMA",19:"BREAK",20:"CONTINUE",22:"VOID",23:"ID",24:"PARIZQ",26:"PARDER",27:"LLAIZQ",28:"LLADER",32:"COMA",34:"IF",35:"ELSE",36:"SWITCH",39:"CASE",40:"DPUNTOS",41:"DEFAULT",42:"WHILE",43:"DO",44:"FOR",47:"iD",48:"ASIGNAR",49:"TINT",50:"NUMERO",51:"PRINT",52:"RETURN",53:"CORIZQ",54:"CORDER",55:"TNEW",57:"LIST",58:"MENORQ",59:"MAYORA",60:"NEW",61:"PUNTO",62:"ADD",63:"MENOS",64:"NOT",65:"MAS",66:"POR",67:"DIVIDIDO",68:"MOD",69:"POT",70:"MAYORIGUALQ",71:"MENORIGUALQ",72:"IGUALA",73:"DIFERENTED",74:"OR",75:"AND",76:"TRUE",77:"FALSE",78:"CADENA",79:"CARACTER",80:"INTERROGACION",81:"TOLOWER",82:"TDOUBLE",83:"TBOOLEAN",84:"TCHAR",85:"TSTRING"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[9,8],[8,8],[10,2],[30,4],[30,3],[31,3],[31,1],[25,4],[25,2],[25,0],[11,7],[11,11],[11,9],[12,8],[12,7],[12,7],[37,5],[37,4],[38,3],[13,7],[15,9],[14,11],[45,3],[45,4],[46,1],[46,3],[16,5],[21,3],[7,3],[7,5],[7,4],[7,11],[7,9],[7,7],[7,12],[7,7],[7,9],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,1],[33,1],[33,1],[33,1],[33,1],[33,1],[33,6],[33,4],[33,3],[33,4],[33,1],[33,5],[33,1],[33,4],[17,3],[17,3],[56,3],[56,1],[29,1],[29,1],[29,1],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 console.error('Este es un error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 19:
console.log('metodo llamada {'+$$[$0-6]+'} con parametros{'+$$[$0-4]+'}');
break;
case 20:
console.log('funcion llamada {'+$$[$0-6]+'} del tipo {' +$$[$0-7]+'} con parametros{'+$$[$0-4]+'}');
break;
case 22:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 23:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0]
break;
case 24:
this.$ = $$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 26:
this.$ = $$[$0-3]+' '+$$[$0-2]+' '+$$[$0-1]+' '+$$[$0]
break;
case 27:
this.$ = $$[$0-1]+' '+$$[$0]
break;
case 28:
this.$ = 'Sin parametros'
break;
case 29:
console.log('IF');
break;
case 30:
console.log('IF ELSE');
break;
case 31:
console.log('ELIF');
break;
case 32: case 33: case 34:
console.log('SWITCH');
break;
case 36:
console.log('CASE');
break;
case 37:
console.log('DEFAULT');
break;
case 38:
console.log('WHILE');
break;
case 39:
console.log('DO WHILE');
break;
case 40:
console.log('FOR');
break;
case 41:
console.log('se asigna {' + $$[$0] + '} a la variable {' +$$[$0-2]+ '}');
break;
case 42:
console.log('se declaró la variable {' + $$[$0-2] + '} del tipo {int} con valor: '+ $$[$0]);
break;
case 43: case 44:
console.log('se incrementa: ' + $$[$0]);
break;
case 45:
console.log('Se imprime: ' + $$[$0-2]);
break;
case 46:
console.log('return: ' + $$[$0-1]);
break;
case 47:
console.log('se declaró la variable {' + $$[$0-1] + '} del tipo {' + $$[$0-2] + '}');
break;
case 48:
console.log('se declaró la variable {' + $$[$0-3] + '} del tipo {' + $$[$0-4] + '} con valor: '+ $$[$0-1]);
break;
case 49:
console.log('Se asigno {' + $$[$0-1] + '} a la variable {' + $$[$0-3] + '}');
break;
case 50:
console.log('declaración de arreglo {' + $$[$0-7] + '} de tipo {'+ $$[$0-10] + '} de {' + $$[$0-2] + '} posiciones');
break;
case 51:
console.log('declaración de arreglo {' + $$[$0-5] + '} de tipo {'+ $$[$0-8] + '} con valores {' + $$[$0-2] + '}');
break;
case 52:
console.log('Asignar {' + $$[$0-1] + '} a la posicion {' + $$[$0-4] + '} del arreglo {'+$$[$0-6]+'}');
break;
case 53:
console.log('declaración de lista {' + $$[$0-7] + '} del tipo {' + $$[$0-9] + '}');
break;
case 54:
console.log('agregar a lista {' + $$[$0-6] + '} el valor {' + $$[$0-2] + '}');
break;
case 55:
console.log('Asignar {' + $$[$0-1] + '} a la posicion {' + $$[$0-5] + '} de la lista {'+$$[$0-8]+'}');
break;
case 56: case 57:
this.$ = $$[$0-1]+$$[$0];
break;
case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 80: case 86: case 87: case 88:
this.$ = $$[$0-2]+$$[$0-1]+$$[$0];
break;
case 78:
this.$ = $$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 79: case 81: case 85:
this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
case 83:
this.$ = $$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0];
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{1:[3]},{5:[1,36]},o($Vi,[2,3],{6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,21:18,29:19,30:23,4:37,2:$V0,19:$V1,20:$V2,22:$V3,23:$V4,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh}),o($Vi,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),{18:[1,38]},{18:[1,39]},{18:[1,40]},o($Vj,[2,18]),{23:[1,41],53:[1,42]},{24:$Vk,48:[1,43],53:[1,44],61:[1,45],63:$Vl,65:$Vm},{58:[1,49]},{23:[1,50]},{18:[1,51]},{24:[1,52]},{24:[1,53]},{24:[1,54]},{24:[1,55]},{27:[1,56]},{24:[1,57]},{17:68,23:$Vn,24:$Vo,30:69,33:58,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($Vx,[2,90]),o($Vx,[2,91]),o($Vx,[2,92]),o($Vx,[2,93]),o($Vx,[2,94]),{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),{18:[1,71],24:[1,73],48:[1,72]},{54:[1,74]},{17:68,23:$Vn,24:$Vo,30:69,33:75,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{50:[1,76],53:[1,77]},{62:[1,78]},{65:[1,79]},{63:[1,80]},{17:68,23:$Vn,24:$Vo,26:[1,82],30:69,31:81,33:83,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{29:84,49:$Va,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{24:[1,85]},o($Vj,[2,21]),{17:68,23:$Vn,24:$Vo,30:69,33:86,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:87,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:88,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{45:89,47:[1,90],49:[1,91]},{2:$V0,4:92,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{17:68,23:$Vn,24:$Vo,30:69,33:93,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{18:[1,94],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{17:68,23:$Vn,24:$Vo,30:69,33:110,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:111,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VN,[2,72],{24:$Vk,53:[1,112]}),o($VN,[2,73]),o($VN,[2,74]),o($VN,[2,75]),o($VN,[2,76]),o($VN,[2,77]),{17:68,23:$Vn,24:$Vo,29:114,30:69,33:113,49:$Va,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw,82:$Ve,83:$Vf,84:$Vg,85:$Vh},o($VN,[2,82]),o($VN,[2,84]),{24:[1,115]},o($Vj,[2,47]),{17:68,23:$Vn,24:$Vo,30:69,33:116,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VO,$VP,{25:117,29:118,49:$Va,82:$Ve,83:$Vf,84:$Vg,85:$Vh}),{23:[1,119]},{18:[1,120],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{54:[1,121]},{50:[1,122]},{24:[1,123]},o($VN,[2,86]),o($VN,[2,87]),{26:[1,124],32:[1,125]},o($VN,[2,23]),o($VO,[2,25],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM}),{59:[1,126]},o($VO,$VP,{29:118,25:127,49:$Va,82:$Ve,83:$Vf,84:$Vg,85:$Vh}),{26:[1,128],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{26:[1,129],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{26:[1,130],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{18:[1,131]},{48:[1,132]},{23:[1,133]},{28:[1,134]},{26:[1,135],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},o($Vj,[2,46]),{17:68,23:$Vn,24:$Vo,30:69,33:136,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:137,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:138,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:139,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:140,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:141,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:142,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:143,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:144,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:145,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:146,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:147,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:148,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:149,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:150,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VN,[2,56]),o($VQ,[2,57],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ}),{50:[1,152],53:[1,151]},{26:[1,153],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{26:[1,154]},{17:68,23:$Vn,24:$Vo,30:69,33:155,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{18:[1,156],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{26:[1,157],32:$VR},{23:[1,159]},{48:[1,160]},o($Vj,[2,49]),{48:[1,161]},{54:[1,162]},{17:68,23:$Vn,24:$Vo,30:69,33:163,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VN,[2,22]),{17:68,23:$Vn,24:$Vo,30:69,33:164,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{23:[1,165]},{26:[1,166],32:$VR},{27:[1,167]},{27:[1,168]},{27:[1,169]},{17:68,23:$Vn,24:$Vo,30:69,33:170,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{17:68,23:$Vn,24:$Vo,30:69,33:171,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{48:[1,172]},{42:[1,173]},{18:[1,174]},o($VS,[2,58],{66:$VC,67:$VD,68:$VE,69:$VF}),o($VS,[2,59],{66:$VC,67:$VD,68:$VE,69:$VF}),o($VN,[2,60]),o($VN,[2,61]),o($VN,[2,62]),o($VN,[2,63]),o($VT,[2,64],{63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,65],{63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,66],{63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,67],{63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,68],{63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VT,[2,69],{63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF}),o($VU,[2,70],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,75:$VL}),o($VQ,[2,71],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ}),{40:[1,175],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{50:[1,176]},{54:[1,177]},o($VN,[2,80]),{17:68,23:$Vn,24:$Vo,30:69,33:178,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{26:[1,179],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},o($Vj,[2,48]),{27:[1,180]},{29:181,49:$Va,82:$Ve,83:$Vf,84:$Vg,85:$Vh},o($VO,[2,27]),{27:[1,183],55:[1,182]},{17:68,23:$Vn,24:$Vo,30:69,33:184,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{54:[1,185]},{26:[1,186],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},o($VO,[2,24],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM}),{48:[1,187]},{27:[1,188]},{2:$V0,4:189,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{37:190,38:191,39:[1,192],41:$VV},{2:$V0,4:194,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{18:[1,195],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{18:[2,41],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{50:[1,196]},{24:[1,197]},o($Vj,[2,45]),{17:68,23:$Vn,24:$Vo,30:69,33:198,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{54:[1,199]},o($VN,[2,79]),o($VU,[2,81],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,75:$VL}),o($VN,[2,85]),{2:$V0,4:200,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{23:[1,201]},{29:202,49:$Va,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{17:68,23:$Vn,24:$Vo,30:69,33:204,50:$Vp,56:203,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{18:[1,205],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{48:[1,206]},{18:[1,207]},{60:[1,208]},{2:$V0,4:209,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{28:[1,210]},{28:[1,212],38:211,39:[1,213],41:$VV},{28:[1,214]},{17:68,23:$Vn,24:$Vo,30:69,33:215,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{40:[1,216]},{28:[1,217]},{17:219,23:[1,220],46:218},{18:[2,42]},{17:68,23:$Vn,24:$Vo,30:69,33:221,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($VU,[2,83],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,75:$VL}),{54:[1,222]},{28:[1,223]},o($VO,[2,26]),{53:[1,224]},{28:[1,225],32:[1,226]},o($VW,[2,89],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM}),o($Vj,[2,52]),{17:68,23:$Vn,24:$Vo,30:69,33:227,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($Vj,[2,54]),{57:[1,228]},{28:[1,229]},o($Vj,[2,29],{35:[1,230]}),{28:[1,231]},o($Vj,[2,33]),{17:68,23:$Vn,24:$Vo,30:69,33:232,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},o($Vj,[2,34]),{40:[1,233],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{2:$V0,4:234,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},o($Vj,[2,38]),{26:[1,235]},{26:[2,43]},{48:[1,236],63:$Vl,65:$Vm},{26:[1,237],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},o($VN,[2,78]),o($Vj,[2,20]),{50:[1,238]},{18:[1,239]},{17:68,23:$Vn,24:$Vo,30:69,33:240,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{18:[1,241],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{58:[1,242]},o($Vj,[2,19]),{11:244,27:[1,243],34:$V5},o($Vj,[2,32]),{40:[1,245],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},{2:$V0,4:246,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{28:[2,37]},{27:[1,247]},{17:68,23:$Vn,24:$Vo,30:69,33:248,50:$Vp,63:$Vq,64:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,81:$Vw},{18:[1,249]},{54:[1,250]},o($Vj,[2,51]),o($VW,[2,88],{58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM}),o($Vj,[2,55]),{29:251,49:$Va,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{6:252,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},o($Vj,[2,31]),{2:$V0,4:253,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},o($VX,[2,36]),{2:$V0,4:254,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,19:$V1,20:$V2,21:18,22:$V3,23:$V4,29:19,30:23,34:$V5,36:$V6,42:$V7,43:$V8,44:$V9,49:$Va,51:$Vb,52:$Vc,57:$Vd,82:$Ve,83:$Vf,84:$Vg,85:$Vh},{26:[2,44],58:$Vy,59:$Vz,63:$VA,65:$VB,66:$VC,67:$VD,68:$VE,69:$VF,70:$VG,71:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,80:$VM},o($Vj,[2,39]),{18:[1,255]},{59:[1,256]},{28:[1,257]},o($VX,[2,35]),{28:[1,258]},o($Vj,[2,50]),{18:[1,259]},o($Vj,[2,30]),o($Vj,[2,40]),o($Vj,[2,53])],
defaultActions: {36:[2,1],196:[2,42],219:[2,43],234:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:return 49
break;
case 6:return 82
break;
case 7:return 83
break;
case 8:return 84
break;
case 9:return 85
break;
case 10:return 76
break;
case 11:return 77
break;
case 12:return 57
break;
case 13:return 60
break;
case 14:return 62
break;
case 15:return 65
break;
case 16:return 63
break;
case 17:return 66
break;
case 18:return 67
break;
case 19:return 69
break;
case 20:return 68
break;
case 21:return 72
break;
case 22:return 73
break;
case 23:return 71
break;
case 24:return 58
break;
case 25:return 70
break;
case 26:return 59
break;
case 27:return 48
break;
case 28:return 80
break;
case 29:return 40
break;
case 30:return 18;
break;
case 31:return 61;
break;
case 32:return 32;
break;
case 33:return 74
break;
case 34:return 75
break;
case 35:return 64
break;
case 36:return 24
break;
case 37:return 26
break;
case 38:return 27
break;
case 39:return 28
break;
case 40:return 53
break;
case 41:return 54
break;
case 42:return 34
break;
case 43:return 35
break;
case 44:return 36
break;
case 45:return 39
break;
case 46:return 41
break;
case 47:return 19
break;
case 48:return 42
break;
case 49:return 43
break;
case 50:return 51
break;
case 51:return 44
break;
case 52:return 20
break;
case 53:return 52
break;
case 54:return 22
break;
case 55:return 81
break;
case 56:return 50;
break;
case 57:return 23;
break;
case 58:return 78;
break;
case 59:return 79;
break;
case 60:return 5;
break;
case 61: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*/]*[*][/])/i,/^(?:Int\b)/i,/^(?:Double\b)/i,/^(?:Boolean\b)/i,/^(?:Char\b)/i,/^(?:String\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:List\b)/i,/^(?:New\b)/i,/^(?:Add\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:Break\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:toLower\b)/i,/^(?:[0-9]+(\.[0-9]+)?)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:"[^"]*")/i,/^(?:('[^']'))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}