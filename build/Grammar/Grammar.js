/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [1, 19], $V1 = [1, 14], $V2 = [1, 15], $V3 = [1, 16], $V4 = [1, 31], $V5 = [1, 22], $V6 = [1, 24], $V7 = [1, 25], $V8 = [1, 26], $V9 = [1, 28], $Va = [1, 27], $Vb = [1, 32], $Vc = [1, 29], $Vd = [1, 30], $Ve = [1, 21], $Vf = [1, 33], $Vg = [1, 34], $Vh = [1, 35], $Vi = [1, 36], $Vj = [2, 5, 17, 21, 22, 25, 29, 32, 38, 40, 43, 45, 46, 47, 48, 53, 56, 57, 61, 95, 96, 97, 98], $Vk = [1, 44], $Vl = [1, 62], $Vm = [1, 68], $Vn = [1, 60], $Vo = [1, 61], $Vp = [1, 63], $Vq = [1, 64], $Vr = [1, 65], $Vs = [1, 66], $Vt = [1, 67], $Vu = [1, 70], $Vv = [1, 71], $Vw = [1, 72], $Vx = [1, 73], $Vy = [1, 74], $Vz = [1, 75], $VA = [1, 76], $VB = [17, 27, 58, 63], $VC = [1, 109], $VD = [1, 111], $VE = [1, 103], $VF = [1, 102], $VG = [1, 104], $VH = [1, 105], $VI = [1, 106], $VJ = [1, 107], $VK = [1, 108], $VL = [1, 110], $VM = [1, 112], $VN = [1, 113], $VO = [1, 114], $VP = [1, 115], $VQ = [1, 116], $VR = [19, 27, 32, 36, 44, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 86], $VS = [27, 36], $VT = [2, 32], $VU = [19, 27, 32, 36, 44, 79, 80, 86], $VV = [1, 187], $VW = [19, 27, 32, 36, 44, 62, 63, 68, 70, 75, 76, 77, 78, 79, 80, 86], $VX = [19, 27, 32, 36, 44, 62, 63, 75, 76, 77, 78, 79, 80, 86], $VY = [19, 27, 32, 36, 44, 79, 86], $VZ = [1, 213], $V_ = [27, 32, 36], $V$ = [1, 227], $V01 = [32, 43, 45];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "ini": 3, "instrucciones": 4, "EOF": 5, "instruccion": 6, "declaracionVar": 7, "funciones": 8, "metodos": 9, "llamada": 10, "sentencia_if": 11, "sentencia_switch": 12, "sentencia_while": 13, "sentencia_for": 14, "sentencia_dowhile": 15, "sentencia_print": 16, "ID": 17, "INC": 18, "PTCOMA": 19, "DEC": 20, "CONTINUE": 21, "BREAK": 22, "sentencia_return": 23, "exe": 24, "EXEC": 25, "PARIZQ": 26, "PARDER": 27, "listaValores": 28, "VOID": 29, "parametros": 30, "LLAIZQ": 31, "LLADER": 32, "tipos": 33, "llamar": 34, "parametros_llamada": 35, "COMA": 36, "expresion": 37, "IF": 38, "ELSE": 39, "SWITCH": 40, "caseList": 41, "defaultList": 42, "CASE": 43, "DPUNTOS": 44, "DEFAULT": 45, "WHILE": 46, "DO": 47, "FOR": 48, "forVar": 49, "for_increment": 50, "iD": 51, "ASIGNAR": 52, "TINT": 53, "ENTERO": 54, "increment_decrement": 55, "PRINT": 56, "RETURN": 57, "CORIZQ": 58, "CORDER": 59, "TNEW": 60, "LIST": 61, "MENORQ": 62, "MAYORA": 63, "NEW": 64, "tocha": 65, "PUNTO": 66, "ADD": 67, "MENOS": 68, "NOT": 69, "MAS": 70, "POR": 71, "DIVIDIDO": 72, "MOD": 73, "POT": 74, "MENORIGUALQ": 75, "MAYORIGUALQ": 76, "IGUALA": 77, "DIFERENTED": 78, "OR": 79, "AND": 80, "DECIMAL": 81, "TRUE": 82, "FALSE": 83, "CADENA": 84, "CARACTER": 85, "INTERROGACION": 86, "TOLOWER": 87, "TOUPPER": 88, "LENGTH": 89, "TRUNCATE": 90, "ROUND": 91, "TYPEOF": 92, "TOSTRING": 93, "TOCHARARRAY": 94, "TDOUBLE": 95, "TBOOLEAN": 96, "TCHAR": 97, "TSTRING": 98, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 17: "ID", 18: "INC", 19: "PTCOMA", 20: "DEC", 21: "CONTINUE", 22: "BREAK", 25: "EXEC", 26: "PARIZQ", 27: "PARDER", 29: "VOID", 31: "LLAIZQ", 32: "LLADER", 36: "COMA", 38: "IF", 39: "ELSE", 40: "SWITCH", 43: "CASE", 44: "DPUNTOS", 45: "DEFAULT", 46: "WHILE", 47: "DO", 48: "FOR", 51: "iD", 52: "ASIGNAR", 53: "TINT", 54: "ENTERO", 55: "increment_decrement", 56: "PRINT", 57: "RETURN", 58: "CORIZQ", 59: "CORDER", 60: "TNEW", 61: "LIST", 62: "MENORQ", 63: "MAYORA", 64: "NEW", 66: "PUNTO", 67: "ADD", 68: "MENOS", 69: "NOT", 70: "MAS", 71: "POR", 72: "DIVIDIDO", 73: "MOD", 74: "POT", 75: "MENORIGUALQ", 76: "MAYORIGUALQ", 77: "IGUALA", 78: "DIFERENTED", 79: "OR", 80: "AND", 81: "DECIMAL", 82: "TRUE", 83: "FALSE", 84: "CADENA", 85: "CARACTER", 86: "INTERROGACION", 87: "TOLOWER", 88: "TOUPPER", 89: "LENGTH", 90: "TRUNCATE", 91: "ROUND", 92: "TYPEOF", 93: "TOSTRING", 94: "TOCHARARRAY", 95: "TDOUBLE", 96: "TBOOLEAN", 97: "TCHAR", 98: "TSTRING" },
        productions_: [0, [3, 2], [4, 2], [4, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 3], [6, 3], [6, 2], [6, 2], [6, 1], [6, 1], [6, 2], [24, 5], [24, 6], [9, 8], [8, 8], [10, 2], [34, 4], [34, 3], [35, 3], [35, 1], [30, 4], [30, 2], [30, 0], [11, 7], [11, 11], [11, 9], [12, 8], [12, 7], [12, 7], [41, 5], [41, 4], [42, 3], [13, 7], [15, 9], [14, 11], [49, 3], [49, 4], [50, 1], [50, 3], [16, 5], [23, 3], [7, 3], [7, 5], [7, 4], [7, 11], [7, 9], [7, 7], [7, 12], [7, 8], [7, 7], [7, 9], [37, 2], [37, 2], [37, 2], [37, 3], [37, 2], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 3], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 1], [37, 6], [37, 4], [37, 3], [37, 4], [37, 5], [37, 1], [37, 4], [37, 4], [37, 4], [37, 4], [37, 4], [37, 4], [37, 4], [28, 3], [28, 1], [65, 4], [33, 1], [33, 1], [33, 1], [33, 1], [33, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = new Tree($$[$0 - 1]);
                    return this.$;
                    break;
                case 2:
                    this.$ = $$[$0 - 1];
                    $$[$0 - 1].push($$[$0]);
                    break;
                case 3:
                    this.$ = [$$[$0]];
                    break;
                case 4:
                case 8:
                case 10:
                case 13:
                    this.$ = $$[$0];
                    break;
                case 14:
                    this.$ = new InDecrement($$[$0 - 2], "++", _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 15:
                    this.$ = new InDecrement($$[$0 - 2], "--", _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 16:
                    this.$ = new Continue(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 17:
                    this.$ = new Break(_$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 20:
                    console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
                    break;
                case 32:
                    this.$ = 'Sin parametros';
                    break;
                case 33:
                    this.$ = new If($$[$0 - 4], $$[$0 - 1], [], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                    break;
                case 34:
                    this.$ = new If($$[$0 - 8], $$[$0 - 5], $$[$0 - 1], _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                    break;
                case 35:
                    this.$ = new If($$[$0 - 6], $$[$0 - 3], [$$[$0]], _$[$0 - 8].first_line, _$[$0 - 8].first_column);
                    break;
                case 42:
                    this.$ = new While($$[$0 - 4], $$[$0 - 1], _$[$0 - 6].first_line, _$[$0 - 6].first_column);
                    break;
                case 49:
                    this.$ = new Print($$[$0 - 2], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    break;
                case 51:
                    this.$ = new Declaracion($$[$0 - 2], $$[$0 - 1], defal($$[$0 - 2]), _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 52:
                    this.$ = new Declaracion($$[$0 - 4], $$[$0 - 3], $$[$0 - 1], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    break;
                case 53:
                    this.$ = new Asignacion($$[$0 - 3], $$[$0 - 1], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    break;
                case 61:
                    this.$ = new Aritmetica(null, $$[$0], '-', _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 62:
                    this.$ = new Logico(null, $$[$0], '!', _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 63:
                    this.$ = new InDecrement($$[$0 - 1], "++", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 64:
                    this.$ = new Aritmetica($$[$0 - 2], $$[$0], '+', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 65:
                    this.$ = new InDecrement($$[$0 - 1], "--", _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 66:
                    this.$ = new Aritmetica($$[$0 - 2], $$[$0], '-', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 67:
                    this.$ = new Aritmetica($$[$0 - 2], $$[$0], '*', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 68:
                    this.$ = new Aritmetica($$[$0 - 2], $$[$0], '/', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 69:
                    this.$ = new Aritmetica($$[$0 - 2], $$[$0], '%', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 70:
                    this.$ = new Aritmetica($$[$0 - 2], $$[$0], '^', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 71:
                    this.$ = new Relacional($$[$0 - 2], $$[$0], '<=', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 72:
                    this.$ = new Relacional($$[$0 - 2], $$[$0], '<', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 73:
                    this.$ = new Relacional($$[$0 - 2], $$[$0], '>=', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 74:
                    this.$ = new Relacional($$[$0 - 2], $$[$0], '>', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 75:
                    this.$ = new Relacional($$[$0 - 2], $$[$0], '==', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 76:
                    this.$ = new Relacional($$[$0 - 2], $$[$0], '!=', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 77:
                    this.$ = new Logico($$[$0 - 2], $$[$0], '||', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 78:
                    this.$ = new Logico($$[$0 - 2], $$[$0], '&&', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 79:
                    this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
                    break;
                case 80:
                    this.$ = new Primitivo(new Tipo(esEntero(Number($$[$0]))), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                    break;
                case 81:
                    this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), true, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 82:
                    this.$ = new Primitivo(new Tipo(tipos.BOOLEANO), false, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 83:
                    this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
                    break;
                case 84:
                    this.$ = new Primitivo(new Tipo(tipos.CARACTER), $$[$0].replace(/\'/g, ""), _$[$0].first_line, _$[$0].first_column);
                    break;
                case 88:
                    this.$ = new Casteo($$[$0 - 2], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    break;
                case 89:
                    this.$ = new Ternario($$[$0 - 4], $$[$0 - 2], $$[$0], _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    break;
                case 101:
                    this.$ = new Tipo(tipos.ENTERO);
                    break;
                case 102:
                    this.$ = new Tipo(tipos.DECIMAL);
                    break;
                case 103:
                    this.$ = new Tipo(tipos.BOOLEANO);
                    break;
                case 104:
                    this.$ = new Tipo(tipos.CARACTER);
                    break;
                case 105:
                    this.$ = new Tipo(tipos.STRING);
                    break;
            }
        },
        table: [{ 2: $V0, 3: 1, 4: 2, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 1: [3] }, { 2: $V0, 5: [1, 37], 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($Vj, [2, 3]), o($Vj, [2, 4]), o($Vj, [2, 5]), o($Vj, [2, 6]), o($Vj, [2, 7]), o($Vj, [2, 8]), o($Vj, [2, 9]), o($Vj, [2, 10]), o($Vj, [2, 11]), o($Vj, [2, 12]), o($Vj, [2, 13]), { 18: [1, 39], 20: [1, 40], 26: $Vk, 52: [1, 41], 58: [1, 42], 66: [1, 43] }, { 19: [1, 45] }, { 19: [1, 46] }, o($Vj, [2, 18]), o($Vj, [2, 19]), { 19: [1, 47] }, { 17: [1, 48], 58: [1, 49] }, { 62: [1, 50] }, { 17: [1, 51] }, { 19: [1, 52] }, { 26: [1, 53] }, { 26: [1, 54] }, { 26: [1, 55] }, { 26: [1, 56] }, { 31: [1, 57] }, { 26: [1, 58] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 59, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: [1, 77] }, o($VB, [2, 101]), o($VB, [2, 102]), o($VB, [2, 103]), o($VB, [2, 104]), o($VB, [2, 105]), { 1: [2, 1] }, o($Vj, [2, 2]), { 19: [1, 78] }, { 19: [1, 79] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 80, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 54: [1, 81], 58: [1, 82] }, { 67: [1, 83] }, { 17: $Vl, 26: $Vm, 27: [1, 85], 34: 69, 35: 84, 37: 86, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($Vj, [2, 16]), o($Vj, [2, 17]), o($Vj, [2, 20]), { 19: [1, 87], 26: [1, 89], 52: [1, 88] }, { 59: [1, 90] }, { 33: 91, 53: $Vb, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 26: [1, 92] }, o($Vj, [2, 25]), { 17: $Vl, 26: $Vm, 34: 69, 37: 93, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 94, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 95, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 49: 96, 51: [1, 97], 53: [1, 98] }, { 2: $V0, 4: 99, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 17: $Vl, 26: $Vm, 34: 69, 37: 100, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 19: [1, 101], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 17: $Vl, 26: $Vm, 34: 69, 37: 117, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 118, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($VR, [2, 79], { 18: [1, 119], 20: [1, 120], 26: $Vk, 58: [1, 121] }), o($VR, [2, 80]), o($VR, [2, 81]), o($VR, [2, 82]), o($VR, [2, 83]), o($VR, [2, 84]), { 17: $Vl, 26: $Vm, 33: 123, 34: 69, 37: 122, 53: $Vb, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($VR, [2, 90]), { 26: [1, 124] }, { 26: [1, 125] }, { 26: [1, 126] }, { 26: [1, 127] }, { 26: [1, 128] }, { 26: [1, 129] }, { 26: [1, 130] }, { 26: [1, 131] }, o($Vj, [2, 14]), o($Vj, [2, 15]), { 19: [1, 132], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 59: [1, 133] }, { 54: [1, 134] }, { 26: [1, 135] }, { 27: [1, 136], 36: [1, 137] }, o($VR, [2, 27]), o($VS, [2, 29], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }), o($Vj, [2, 51]), { 17: $Vl, 26: $Vm, 34: 69, 37: 138, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($VS, $VT, { 30: 139, 33: 140, 53: $Vb, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }), { 17: [1, 141] }, { 63: [1, 142] }, o($VS, $VT, { 33: 140, 30: 143, 53: $Vb, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }), { 27: [1, 144], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 145], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 146], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 19: [1, 147] }, { 52: [1, 148] }, { 17: [1, 149] }, { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 150], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 27: [1, 151], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, o($Vj, [2, 50]), { 17: $Vl, 26: $Vm, 34: 69, 37: 152, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 153, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 154, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 155, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 156, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 157, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 158, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 159, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 160, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 161, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 162, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 163, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 164, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 165, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 166, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($VR, [2, 61]), o($VU, [2, 62], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN }), o($VR, [2, 63]), o($VR, [2, 65]), { 54: [1, 168], 58: [1, 167] }, { 27: [1, 169], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 170] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 171, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 172, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 173, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 174, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 175, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 176, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 177, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 27: [1, 178], 28: 179, 34: 69, 37: 180, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($Vj, [2, 53]), { 52: [1, 181] }, { 59: [1, 182] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 183, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($VR, [2, 26]), { 17: $Vl, 26: $Vm, 34: 69, 37: 184, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 19: [1, 185], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 186], 36: $VV }, { 17: [1, 188] }, { 52: [1, 189] }, { 17: [1, 190] }, { 27: [1, 191], 36: $VV }, { 31: [1, 192] }, { 31: [1, 193] }, { 31: [1, 194] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 195, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 17: $Vl, 26: $Vm, 34: 69, 37: 196, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 52: [1, 197] }, { 46: [1, 198] }, { 19: [1, 199] }, o($VW, [2, 64], { 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VW, [2, 66], { 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VR, [2, 67]), o($VR, [2, 68]), o($VR, [2, 69]), o($VR, [2, 70]), o($VX, [2, 71], { 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VX, [2, 72], { 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VX, [2, 73], { 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VX, [2, 74], { 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VX, [2, 75], { 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VX, [2, 76], { 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ }), o($VY, [2, 77], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 80: $VP }), o($VU, [2, 78], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN }), { 44: [1, 200], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 54: [1, 201] }, { 59: [1, 202] }, o($VR, [2, 87]), { 17: $Vl, 26: $Vm, 34: 69, 37: 203, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 27: [1, 204], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 205], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 206], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 207], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 208], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 209], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 27: [1, 210], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 19: [1, 211] }, { 27: [1, 212], 36: $VZ }, o($V_, [2, 99], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }), { 17: $Vl, 26: $Vm, 34: 69, 37: 214, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 59: [1, 215] }, { 27: [1, 216], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, o($VS, [2, 28], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }), o($Vj, [2, 52]), { 31: [1, 217] }, { 33: 218, 53: $Vb, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($VS, [2, 31]), { 31: [1, 220], 60: [1, 219] }, { 52: [1, 221] }, { 31: [1, 222] }, { 2: $V0, 4: 223, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 41: 224, 42: 225, 43: [1, 226], 45: $V$ }, { 2: $V0, 4: 228, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 19: [1, 229], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 19: [2, 45], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 54: [1, 230] }, { 26: [1, 231] }, o($Vj, [2, 49]), { 17: $Vl, 26: $Vm, 34: 69, 37: 232, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 59: [1, 233] }, o($VR, [2, 86]), o($VY, [2, 88], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 80: $VP }), o($VR, [2, 91]), o($VR, [2, 92]), o($VR, [2, 93]), o($VR, [2, 94]), o($VR, [2, 95]), o($VR, [2, 96]), o($VR, [2, 97]), o($Vj, [2, 21]), { 19: [1, 234] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 235, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 19: [1, 236], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 52: [1, 237] }, { 19: [1, 238] }, { 2: $V0, 4: 239, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 17: [1, 240] }, { 33: 241, 53: $Vb, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 17: $Vl, 26: $Vm, 28: 242, 34: 69, 37: 180, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 64: [1, 243], 65: 244, 94: [1, 245] }, { 2: $V0, 4: 246, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 247], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 32: [1, 249], 42: 248, 43: [1, 250], 45: $V$ }, { 32: [1, 251] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 252, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 44: [1, 253] }, { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 254], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 17: [1, 257], 50: 255, 55: [1, 256] }, { 19: [2, 46] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 258, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($VY, [2, 89], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 80: $VP }), { 59: [1, 259] }, o($Vj, [2, 22]), o($V_, [2, 98], { 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }), o($Vj, [2, 56]), { 17: $Vl, 26: $Vm, 34: 69, 37: 260, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($Vj, [2, 59]), { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 261], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($VS, [2, 30]), { 58: [1, 262] }, { 32: [1, 263], 36: $VZ }, { 61: [1, 264] }, { 19: [1, 265] }, { 26: [1, 266] }, { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 267], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($Vj, [2, 33], { 39: [1, 268] }), { 32: [1, 269] }, o($Vj, [2, 37]), { 17: $Vl, 26: $Vm, 34: 69, 37: 270, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($Vj, [2, 38]), { 44: [1, 271], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 2: $V0, 4: 272, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($Vj, [2, 42]), { 27: [1, 273] }, { 27: [2, 47] }, { 52: [1, 274] }, { 27: [1, 275], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, o($VR, [2, 85]), { 19: [1, 276], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, o($Vj, [2, 24]), { 54: [1, 277] }, { 19: [1, 278] }, { 62: [1, 279] }, o($Vj, [2, 58]), { 17: $Vl, 26: $Vm, 34: 69, 37: 280, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, o($Vj, [2, 23]), { 11: 282, 31: [1, 281], 38: $V6 }, o($Vj, [2, 36]), { 44: [1, 283], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 2: $V0, 4: 284, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [2, 41], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 31: [1, 285] }, { 17: $Vl, 26: $Vm, 34: 69, 37: 286, 68: $Vn, 69: $Vo, 81: $Vp, 82: $Vq, 83: $Vr, 84: $Vs, 85: $Vt, 87: $Vu, 88: $Vv, 89: $Vw, 90: $Vx, 91: $Vy, 92: $Vz, 93: $VA }, { 19: [1, 287] }, o($Vj, [2, 60]), { 59: [1, 288] }, o($Vj, [2, 55]), { 33: 289, 53: $Vb, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 27: [1, 290], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, { 2: $V0, 4: 291, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($Vj, [2, 35]), { 2: $V0, 4: 292, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($V01, [2, 40], { 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 23: 17, 24: 18, 33: 20, 34: 23, 6: 38, 2: $V0, 17: $V1, 21: $V2, 22: $V3, 25: $V4, 29: $V5, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }), { 2: $V0, 4: 293, 6: 3, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, { 27: [2, 48], 62: $VC, 63: $VD, 68: $VE, 70: $VF, 71: $VG, 72: $VH, 73: $VI, 74: $VJ, 75: $VK, 76: $VL, 77: $VM, 78: $VN, 79: $VO, 80: $VP, 86: $VQ }, o($Vj, [2, 43]), { 19: [1, 294] }, { 63: [1, 295] }, { 19: [2, 100] }, { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 296], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($V01, [2, 39], { 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 23: 17, 24: 18, 33: 20, 34: 23, 6: 38, 2: $V0, 17: $V1, 21: $V2, 22: $V3, 25: $V4, 29: $V5, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }), { 2: $V0, 6: 38, 7: 4, 8: 5, 9: 6, 10: 7, 11: 8, 12: 9, 13: 10, 14: 11, 15: 12, 16: 13, 17: $V1, 21: $V2, 22: $V3, 23: 17, 24: 18, 25: $V4, 29: $V5, 32: [1, 297], 33: 20, 34: 23, 38: $V6, 40: $V7, 46: $V8, 47: $V9, 48: $Va, 53: $Vb, 56: $Vc, 57: $Vd, 61: $Ve, 95: $Vf, 96: $Vg, 97: $Vh, 98: $Vi }, o($Vj, [2, 54]), { 19: [1, 298] }, o($Vj, [2, 34]), o($Vj, [2, 44]), o($Vj, [2, 57])],
        defaultActions: { 37: [2, 1], 230: [2, 46], 256: [2, 47], 290: [2, 100] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], // token stack
            vstack = [null], // semantic value stack
            lstack = [], // location stack
            table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            //this.reductionCount = this.shiftCount = 0;
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }
                _handle_error: 
                // handle parse error
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var error_rule_depth;
                    var errStr = '';
                    // Return the rule stack depth where the nearest error rule can be found.
                    // Return FALSE when no error recovery rule was found.
                    function locateNearestErrorRecoveryRule(state) {
                        var stack_probe = stack.length - 1;
                        var depth = 0;
                        // try to recover from error
                        for (;;) {
                            // check for error recovery rule in this state
                            if ((TERROR.toString()) in table[state]) {
                                return depth;
                            }
                            if (state === 0 || stack_probe < 2) {
                                return false; // No suitable error recovery rule available.
                            }
                            stack_probe -= 2; // popStack(1): [symbol, action]
                            state = stack[stack_probe];
                            ++depth;
                        }
                    }
                    if (!recovering) {
                        // first see if there's any chance at hitting an error recovery rule:
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                        // Report error
                        expected = [];
                        for (p in table[state]) {
                            if (this.terminals_[p] && p > TERROR) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        }
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        }
                        else {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                (symbol == EOF ? "end of input" :
                                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
                        }
                        this.parseError(errStr, {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: (error_rule_depth !== false)
                        });
                    }
                    else if (preErrorSymbol !== EOF) {
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                    }
                    // just recovered from another error
                    if (recovering == 3) {
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                        }
                        // discard current lookahead and grab another
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        symbol = lex();
                    }
                    // try to recover from error
                    if (error_rule_depth === false) {
                        throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                    }
                    popStack(error_rule_depth);
                    preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                    symbol = TERROR; // insert generic error symbol as new lookahead
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                }
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        // reduce
                        //this.reductionCount++;
                        len = this.productions_[action[1]][1];
                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        // accept
                        return true;
                }
            }
            return true;
        } };
    let txt = "";
    //Tipos
    const { Tree } = require('../Simbols/Tree');
    const { Tipo, tipos, esEntero } = require('../other/tipo');
    const { Primitivo } = require('../Expresiones/Primitivo');
    const { Excepcion } = require('../other/Excepcion');
    const { Identificador } = require('../Expresiones/Identificador');
    //Instrucciones
    const { Print } = require('../Instrucciones/Print');
    const { Declaracion, defal } = require('../Instrucciones/Declaracion');
    const { Asignacion } = require('../Instrucciones/Asignacion');
    const { If } = require('../Instrucciones/If');
    const { While } = require('../Instrucciones/While');
    const { Continue } = require('../Expresiones/Continue');
    const { Break } = require('../Expresiones/Break');
    //Expresion
    const { Aritmetica } = require('../Expresiones/Aritmetica');
    const { Relacional } = require('../Expresiones/Relacional');
    const { Logico } = require('../Expresiones/Logico');
    const { Ternario } = require('../Expresiones/Ternario');
    const { Casteo } = require('../Expresiones/Casteo');
    const { InDecrement } = require('../Expresiones/InDecrement');
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        break;
                    case 4:
                        break;
                    case 5:
                        txt = "";
                        this.begin("CADENA");
                        break;
                    case 6:
                        txt += yy_.yytext;
                        break;
                    case 7:
                        txt += '\n';
                        break;
                    case 8:
                        txt += '\t';
                        break;
                    case 9:
                        txt += '\"';
                        break;
                    case 10:
                        txt += '\'';
                        break;
                    case 11:
                        txt += '\\';
                        break;
                    case 12:
                        yy_.yytext = txt;
                        this.popState();
                        return 84;
                        break;
                    case 13:
                        return 53;
                        break;
                    case 14:
                        return 95;
                        break;
                    case 15:
                        return 96;
                        break;
                    case 16:
                        return 97;
                        break;
                    case 17:
                        return 98;
                        break;
                    case 18:
                        return 82;
                        break;
                    case 19:
                        return 83;
                        break;
                    case 20:
                        return 61;
                        break;
                    case 21:
                        return 64;
                        break;
                    case 22:
                        return 67;
                        break;
                    case 23:
                        return 18;
                        break;
                    case 24:
                        return 70;
                        break;
                    case 25:
                        return 20;
                        break;
                    case 26:
                        return 68;
                        break;
                    case 27:
                        return 71;
                        break;
                    case 28:
                        return 72;
                        break;
                    case 29:
                        return 74;
                        break;
                    case 30:
                        return 73;
                        break;
                    case 31:
                        return 77;
                        break;
                    case 32:
                        return 78;
                        break;
                    case 33:
                        return 75;
                        break;
                    case 34:
                        return 62;
                        break;
                    case 35:
                        return 76;
                        break;
                    case 36:
                        return 63;
                        break;
                    case 37:
                        return 52;
                        break;
                    case 38:
                        return 86;
                        break;
                    case 39:
                        return 44;
                        break;
                    case 40:
                        return 19;
                        break;
                    case 41:
                        return 66;
                        break;
                    case 42:
                        return 36;
                        break;
                    case 43:
                        return 79;
                        break;
                    case 44:
                        return 80;
                        break;
                    case 45:
                        return 69;
                        break;
                    case 46:
                        return 26;
                        break;
                    case 47:
                        return 27;
                        break;
                    case 48:
                        return 31;
                        break;
                    case 49:
                        return 32;
                        break;
                    case 50:
                        return 58;
                        break;
                    case 51:
                        return 59;
                        break;
                    case 52:
                        return 38;
                        break;
                    case 53:
                        return 39;
                        break;
                    case 54:
                        return 40;
                        break;
                    case 55:
                        return 43;
                        break;
                    case 56:
                        return 45;
                        break;
                    case 57:
                        return 22;
                        break;
                    case 58:
                        return 46;
                        break;
                    case 59:
                        return 47;
                        break;
                    case 60:
                        return 56;
                        break;
                    case 61:
                        return 48;
                        break;
                    case 62:
                        return 21;
                        break;
                    case 63:
                        return 57;
                        break;
                    case 64:
                        return 29;
                        break;
                    case 65:
                        return 87;
                        break;
                    case 66:
                        return 88;
                        break;
                    case 67:
                        return 89;
                        break;
                    case 68:
                        return 90;
                        break;
                    case 69:
                        return 91;
                        break;
                    case 70:
                        return 92;
                        break;
                    case 71:
                        return 93;
                        break;
                    case 72:
                        return 94;
                        break;
                    case 73:
                        return 25;
                        break;
                    case 74:
                        return 81;
                        break;
                    case 75:
                        return 54;
                        break;
                    case 76:
                        return 17;
                        break;
                    case 77:
                        return 85;
                        break;
                    case 78:
                        return 5;
                        break;
                    case 79:
                        console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        break;
                }
            },
            rules: [/^(?:\s+)/i, /^(?:[ \t\r\n\f])/i, /^(?:\n)/i, /^(?:\/\/.*)/i, /^(?:[/][*][^*/]*[*][/])/i, /^(?:["])/i, /^(?:[^"\\]+)/i, /^(?:\\n)/i, /^(?:\\t)/i, /^(?:\\")/i, /^(?:\\\\')/i, /^(?:\\\\)/i, /^(?:["])/i, /^(?:Int\b)/i, /^(?:Double\b)/i, /^(?:Boolean\b)/i, /^(?:Char\b)/i, /^(?:String\b)/i, /^(?:True\b)/i, /^(?:False\b)/i, /^(?:List\b)/i, /^(?:New\b)/i, /^(?:Add\b)/i, /^(?:\+\+)/i, /^(?:\+)/i, /^(?:--)/i, /^(?:-)/i, /^(?:\*)/i, /^(?:\/)/i, /^(?:\^)/i, /^(?:%)/i, /^(?:==)/i, /^(?:!=)/i, /^(?:<=)/i, /^(?:<)/i, /^(?:>=)/i, /^(?:>)/i, /^(?:=)/i, /^(?:\?)/i, /^(?::)/i, /^(?:;)/i, /^(?:\.)/i, /^(?:,)/i, /^(?:\|\|)/i, /^(?:&&)/i, /^(?:!)/i, /^(?:\()/i, /^(?:\))/i, /^(?:\{)/i, /^(?:\})/i, /^(?:\[)/i, /^(?:\])/i, /^(?:if\b)/i, /^(?:else\b)/i, /^(?:switch\b)/i, /^(?:case\b)/i, /^(?:default\b)/i, /^(?:Break\b)/i, /^(?:while\b)/i, /^(?:do\b)/i, /^(?:print\b)/i, /^(?:for\b)/i, /^(?:continue\b)/i, /^(?:return\b)/i, /^(?:void\b)/i, /^(?:toLower\b)/i, /^(?:toUpper\b)/i, /^(?:length\b)/i, /^(?:truncate\b)/i, /^(?:round\b)/i, /^(?:typeof\b)/i, /^(?:tostring\b)/i, /^(?:tochararray\b)/i, /^(?:exec\b)/i, /^(?:[0-9]+(\.[0-9]+)?\b)/i, /^(?:[0-9]+\b)/i, /^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i, /^(?:('[^']?'))/i, /^(?:$)/i, /^(?:.)/i],
            conditions: { "CADENA": { "rules": [6, 7, 8, 9, 10, 11, 12], "inclusive": false }, "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = Grammar;
    exports.Parser = Grammar.Parser;
    exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
